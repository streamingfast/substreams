// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package codegen

import (
	"fmt"
	"strings"
)

const (
	// EthereumChainMainnet is a EthereumChain of type Mainnet.
	EthereumChainMainnet EthereumChain = iota
	// EthereumChainBNB is a EthereumChain of type BNB.
	EthereumChainBNB
	// EthereumChainPolygon is a EthereumChain of type Polygon.
	EthereumChainPolygon
	// EthereumChainPolygon is a EthereumChain of type Polygon.
	EthereumChainArbitrum	
	// EthereumChainGoerli is a EthereumChain of type Goerli.
	EthereumChainGoerli
	// EthereumChainMumbai is a EthereumChain of type Mumbai.
	EthereumChainMumbai
	// EthereumChainOther is a EthereumChain of type Other.
	EthereumChainOther
)

var ErrInvalidEthereumChain = fmt.Errorf("not a valid EthereumChain, try [%s]", strings.Join(_EthereumChainNames, ", "))

const _EthereumChainName = "MainnetBNBPolygonArbitrumGoerliMumbaiOther"

var _EthereumChainNames = []string{
	_EthereumChainName[0:7],
	_EthereumChainName[7:10],
	_EthereumChainName[10:17],
	_EthereumChainName[17:25],
	_EthereumChainName[25:31],
	_EthereumChainName[31:36],
	_EthereumChainName[36:41],
}

// EthereumChainNames returns a list of possible string values of EthereumChain.
func EthereumChainNames() []string {
	tmp := make([]string, len(_EthereumChainNames))
	copy(tmp, _EthereumChainNames)
	return tmp
}

var _EthereumChainMap = map[EthereumChain]string{
	EthereumChainMainnet: _EthereumChainName[0:7],
	EthereumChainBNB:     _EthereumChainName[7:10],
	EthereumChainPolygon: _EthereumChainName[10:17],
	EthereumChainArbitrum: _EthereumChainName[17:25],
	EthereumChainGoerli:  _EthereumChainName[25:31],
	EthereumChainMumbai:  _EthereumChainName[31:36],
	EthereumChainOther:   _EthereumChainName[36:41],
}

// String implements the Stringer interface.
func (x EthereumChain) String() string {
	if str, ok := _EthereumChainMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EthereumChain(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x EthereumChain) IsValid() bool {
	_, ok := _EthereumChainMap[x]
	return ok
}

var _EthereumChainValue = map[string]EthereumChain{
	_EthereumChainName[0:7]:                    EthereumChainMainnet,
	strings.ToLower(_EthereumChainName[0:7]):   EthereumChainMainnet,
	_EthereumChainName[7:10]:                   EthereumChainBNB,
	strings.ToLower(_EthereumChainName[7:10]):  EthereumChainBNB,
	_EthereumChainName[10:17]:                  EthereumChainPolygon,
	strings.ToLower(_EthereumChainName[10:17]): EthereumChainPolygon,
	_EthereumChainName[17:25]:                  EthereumChainArbitrum,
	strings.ToLower(_EthereumChainName[17:25]): EthereumChainArbitrum,
	_EthereumChainName[25:31]:                  EthereumChainGoerli,
	strings.ToLower(_EthereumChainName[25:31]): EthereumChainGoerli,
	_EthereumChainName[31:36]:                  EthereumChainMumbai,
	strings.ToLower(_EthereumChainName[31:36]): EthereumChainMumbai,
	_EthereumChainName[36:41]:                  EthereumChainOther,
	strings.ToLower(_EthereumChainName[36:41]): EthereumChainOther,
}

// ParseEthereumChain attempts to convert a string to a EthereumChain.
func ParseEthereumChain(name string) (EthereumChain, error) {
	if x, ok := _EthereumChainValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _EthereumChainValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return EthereumChain(0), fmt.Errorf("%s is %w", name, ErrInvalidEthereumChain)
}

// MarshalText implements the text marshaller method.
func (x EthereumChain) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *EthereumChain) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEthereumChain(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
