// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package codegen

import (
	"fmt"
	"strings"
)

const (
	// StarknetChainMainnet is a StarknetChain of type Mainnet.
	StarknetChainMainnet StarknetChain = iota
	// StarknetChainSepolia is a StarknetChain of type Sepolia.
	StarknetChainSepolia
	// StarknetChainOther is a StarknetChain of type Other.
	StarknetChainOther
)

var ErrInvalidStarknetChain = fmt.Errorf("not a valid StarknetChain, try [%s]", strings.Join(_StarknetChainNames, ", "))

const _StarknetChainName = "MainnetSepoliaOther"

var _StarknetChainNames = []string{
	_StarknetChainName[0:7],
	_StarknetChainName[7:14],
	_StarknetChainName[14:19],
}

// StarknetChainNames returns a list of possible string values of StarknetChain.
func StarknetChainNames() []string {
	tmp := make([]string, len(_StarknetChainNames))
	copy(tmp, _StarknetChainNames)
	return tmp
}

var _StarknetChainMap = map[StarknetChain]string{
	StarknetChainMainnet: _StarknetChainName[0:7],
	StarknetChainSepolia: _StarknetChainName[7:14],
	StarknetChainOther:   _StarknetChainName[14:19],
}

// String implements the Stringer interface.
func (x StarknetChain) String() string {
	if str, ok := _StarknetChainMap[x]; ok {
		return str
	}
	return fmt.Sprintf("StarknetChain(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x StarknetChain) IsValid() bool {
	_, ok := _StarknetChainMap[x]
	return ok
}

var _StarknetChainValue = map[string]StarknetChain{
	_StarknetChainName[0:7]:                    StarknetChainMainnet,
	strings.ToLower(_StarknetChainName[0:7]):   StarknetChainMainnet,
	_StarknetChainName[7:14]:                   StarknetChainSepolia,
	strings.ToLower(_StarknetChainName[7:14]):  StarknetChainSepolia,
	_StarknetChainName[14:19]:                  StarknetChainOther,
	strings.ToLower(_StarknetChainName[14:19]): StarknetChainOther,
}

// ParseStarknetChain attempts to convert a string to a StarknetChain.
func ParseStarknetChain(name string) (StarknetChain, error) {
	if x, ok := _StarknetChainValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _StarknetChainValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return StarknetChain(0), fmt.Errorf("%s is %w", name, ErrInvalidStarknetChain)
}

// MarshalText implements the text marshaller method.
func (x StarknetChain) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *StarknetChain) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStarknetChain(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
