mod abi;
mod pb;
use hex_literal::hex;
use pb::contract::v1 as contract;
use substreams::Hex;
use substreams_database_change::pb::database::DatabaseChanges;
use substreams_ethereum::pb::eth::v2 as eth;
use substreams_ethereum::Event;

#[allow(unused_imports)]
use num_traits::cast::ToPrimitive;

const TRACKED_CONTRACT: [u8; 20] = hex!("{{ .address }}");

substreams_ethereum::init!();

#[substreams::handlers::map]
fn map_events(blk: eth::Block) -> Result<contract::Events, substreams::errors::Error> {
    let timestamp_s = blk.timestamp().seconds as u64 + blk.timestamp().nanos as u64;

    Ok(contract::Events {
        {{- range $event := .events }}
        {{- $rust := $event.Rust }}
        {{ $rust.ProtoOutputModuleFieldName }}: blk
            .receipts()
            .flat_map(|view| {
                view.receipt.logs.iter()
                    .filter(|log| log.address == TRACKED_CONTRACT)
                    .filter_map(|log| {
                        if let Some(event) = abi::contract::events::{{$rust.ABIStructName}}::match_and_decode(log) {
                            return Some(contract::{{$rust.ProtoMessageName}} {
                                trx_hash: Hex(&view.transaction.hash).to_string(),
                                log_index: log.block_index,
                                timestamp_s,
                                block_num: blk.number,
                                {{- range $protoField, $abiToProtoConversion := $rust.ProtoFieldABIConversionMap }}
                                {{$protoField}}: {{$abiToProtoConversion}},
                                {{- end}}
                            });
                        }

                        None
                })
            })
            .collect(),
        {{- end}}
    })
}

#[substreams::handlers::map]
fn db_out(events: contract::Events) -> Result<DatabaseChanges, substreams::errors::Error> {
    // Initialize Database Changes container
    let mut tables = substreams_database_change::tables::Tables::new();

    // Loop over all the abis events to create database changes
    {{- range $event := .events }}
    {{- $rust := $event.Rust }}
    events.{{ $rust.ProtoOutputModuleFieldName }}.into_iter().for_each(|evt| {
        tables
            .create_row("{{ $rust.ProtoOutputModuleFieldName }}", format!("{}-{}", evt.trx_hash, evt.log_index))
            .set("trx_hash", evt.trx_hash)
            .set("log_index", evt.log_index)
            .set("timestamp_s", evt.timestamp_s)
            .set("block_num", evt.block_num)
            {{- $numberOfAttributes := len $rust.ProtoFieldDatabaseChangesMap }}
            {{- $i := 0 }}
            {{- range $protoField, $databaseChangesToProtoConversion := $rust.ProtoFieldDatabaseChangesMap }}
            {{ $i = add $i 1 }}.set("{{$protoField}}", {{$databaseChangesToProtoConversion}}){{if eq $i $numberOfAttributes}};{{ end }}
            {{- end}}
    });

    {{- end}}

    Ok(tables.to_database_changes())
}
