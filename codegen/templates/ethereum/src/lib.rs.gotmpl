mod abi;
mod pb;
use hex_literal::hex;
use pb::contract::v1 as contract;
use substreams::Hex;
use substreams_ethereum::pb::eth::v2 as eth;
use substreams_ethereum::Event;

#[allow(unused_imports)]
use num_traits::cast::ToPrimitive;

const TRACKED_CONTRACT: [u8; 20] = hex!("{{ .address }}");

substreams_ethereum::init!();

#[substreams::handlers::map]
fn map_events(blk: eth::Block) -> Result<contract::Events, substreams::errors::Error> {
    Ok(contract::Events {
        {{- range $event := .events }}
        {{- $rust := $event.Rust }}
        {{ $rust.ProtoOutputModuleFieldName }}: blk
            .receipts()
            .flat_map(|view| {
                view.receipt.logs.iter().filter_map(|log| {
                    if log.address != TRACKED_CONTRACT {
                        return None;
                    }

                    if let Some(event) = abi::contract::events::{{$rust.ABIStructName}}::match_and_decode(log) {
                        return Some(contract::{{$rust.ProtoMessageName}} {
                            trx_hash: Hex(&view.transaction.hash).to_string(),
                            log_index: log.block_index,
                            {{- range $protoField, $abiToProtoConversion := $rust.ProtoFieldABIConversionMap }}
                            {{$protoField}}: {{$abiToProtoConversion}},
                            {{- end}}
                        });
                    }

                    None
                })
            })
            .collect(),
        {{- end}}
    })
}
