// Code generated by Substreams. DO NOT EDIT.
{{$engine := . -}}
use crate::pb;
use substreams::errors::Error;

pub struct Substreams{}

pub trait SubstreamsTrait {
{{range $engine.Manifest.Modules -}}
    {{$module := . -}}
    {{- with ($engine.FunctionSignature $module) -}}
        {{- $functionSignature := . -}}
        {{- template "function" $functionSignature -}}
    {{end -}}
{{end -}}
}

{{define "function"}}
{{- $functionSignature := .}}
    fn {{$functionSignature.Name}}(
    {{- range $id, $arg := $functionSignature.Arguments }}
        {{ template "arg" $arg }}, {{- end -}}
    {{- if ne $functionSignature.StorePolicy "" -}}
        {{- $m := getEngine.MustModule $functionSignature.Name }}
        store: {{ getEngine.WritableStoreType $m }},
    {{- end }}
    )
    {{- if ne .OutputType "" }} -> Result<{{.OutputType}}, Error>{{end}};
{{end }}

{{define "arg" -}}
    {{- $engine := getEngine -}}
    {{- $argument := . -}}
    {{- if  $argument.ModuleInput.IsStore -}}
        {{- $m := $engine.MustModule $argument.Name -}}
        {{- if eq $argument.ModuleInput.Mode "deltas" -}}
            {{$argument.Name}}_deltas
        {{- else -}}
            {{$argument.Name -}}
        {{- end -}}
        : {{ $engine.ReadableStoreType $m $argument.ModuleInput -}}
    {{- else -}}
        {{$argument.Name}}: {{$argument.Type -}}
    {{- end -}}
{{- end -}}
