// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: sf/substreams/intern/v2/service.proto

package pbssinternal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubstreamsClient is the client API for Substreams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubstreamsClient interface {
	ProcessRange(ctx context.Context, in *ProcessRangeRequest, opts ...grpc.CallOption) (Substreams_ProcessRangeClient, error)
}

type substreamsClient struct {
	cc grpc.ClientConnInterface
}

func NewSubstreamsClient(cc grpc.ClientConnInterface) SubstreamsClient {
	return &substreamsClient{cc}
}

func (c *substreamsClient) ProcessRange(ctx context.Context, in *ProcessRangeRequest, opts ...grpc.CallOption) (Substreams_ProcessRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Substreams_ServiceDesc.Streams[0], "/sf.substreams.internal.v2.Substreams/ProcessRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &substreamsProcessRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Substreams_ProcessRangeClient interface {
	Recv() (*ProcessRangeResponse, error)
	grpc.ClientStream
}

type substreamsProcessRangeClient struct {
	grpc.ClientStream
}

func (x *substreamsProcessRangeClient) Recv() (*ProcessRangeResponse, error) {
	m := new(ProcessRangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubstreamsServer is the server API for Substreams service.
// All implementations should embed UnimplementedSubstreamsServer
// for forward compatibility
type SubstreamsServer interface {
	ProcessRange(*ProcessRangeRequest, Substreams_ProcessRangeServer) error
}

// UnimplementedSubstreamsServer should be embedded to have forward compatible implementations.
type UnimplementedSubstreamsServer struct {
}

func (UnimplementedSubstreamsServer) ProcessRange(*ProcessRangeRequest, Substreams_ProcessRangeServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessRange not implemented")
}

// UnsafeSubstreamsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubstreamsServer will
// result in compilation errors.
type UnsafeSubstreamsServer interface {
	mustEmbedUnimplementedSubstreamsServer()
}

func RegisterSubstreamsServer(s grpc.ServiceRegistrar, srv SubstreamsServer) {
	s.RegisterService(&Substreams_ServiceDesc, srv)
}

func _Substreams_ProcessRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProcessRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubstreamsServer).ProcessRange(m, &substreamsProcessRangeServer{stream})
}

type Substreams_ProcessRangeServer interface {
	Send(*ProcessRangeResponse) error
	grpc.ServerStream
}

type substreamsProcessRangeServer struct {
	grpc.ServerStream
}

func (x *substreamsProcessRangeServer) Send(m *ProcessRangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Substreams_ServiceDesc is the grpc.ServiceDesc for Substreams service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Substreams_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.substreams.internal.v2.Substreams",
	HandlerType: (*SubstreamsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessRange",
			Handler:       _Substreams_ProcessRange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sf/substreams/intern/v2/service.proto",
}
