// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: sf/substreams/rpc/v2/service.proto

package pbsubstreamsrpc

import (
	v1 "github.com/streamingfast/substreams/pb/sf/substreams/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StoreDelta_Operation int32

const (
	StoreDelta_UNSET  StoreDelta_Operation = 0
	StoreDelta_CREATE StoreDelta_Operation = 1
	StoreDelta_UPDATE StoreDelta_Operation = 2
	StoreDelta_DELETE StoreDelta_Operation = 3
)

// Enum value maps for StoreDelta_Operation.
var (
	StoreDelta_Operation_name = map[int32]string{
		0: "UNSET",
		1: "CREATE",
		2: "UPDATE",
		3: "DELETE",
	}
	StoreDelta_Operation_value = map[string]int32{
		"UNSET":  0,
		"CREATE": 1,
		"UPDATE": 2,
		"DELETE": 3,
	}
)

func (x StoreDelta_Operation) Enum() *StoreDelta_Operation {
	p := new(StoreDelta_Operation)
	*p = x
	return p
}

func (x StoreDelta_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoreDelta_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_substreams_rpc_v2_service_proto_enumTypes[0].Descriptor()
}

func (StoreDelta_Operation) Type() protoreflect.EnumType {
	return &file_sf_substreams_rpc_v2_service_proto_enumTypes[0]
}

func (x StoreDelta_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoreDelta_Operation.Descriptor instead.
func (StoreDelta_Operation) EnumDescriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{13, 0}
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlockNum int64  `protobuf:"varint,1,opt,name=start_block_num,json=startBlockNum,proto3" json:"start_block_num,omitempty"`
	StartCursor   string `protobuf:"bytes,2,opt,name=start_cursor,json=startCursor,proto3" json:"start_cursor,omitempty"`
	StopBlockNum  uint64 `protobuf:"varint,3,opt,name=stop_block_num,json=stopBlockNum,proto3" json:"stop_block_num,omitempty"`
	// With final_block_only, you only receive blocks that are irreversible:
	// 'final_block_height' will be equal to current block and no 'undo_signal' will ever be sent
	FinalBlocksOnly bool `protobuf:"varint,4,opt,name=final_blocks_only,json=finalBlocksOnly,proto3" json:"final_blocks_only,omitempty"`
	// Substreams has two mode when executing your module(s) either development mode or production
	// mode. Development and production modes impact the execution of Substreams, important aspects
	// of execution include:
	// * The time required to reach the first byte.
	// * The speed that large ranges get executed.
	// * The module logs and outputs sent back to the client.
	//
	// By default, the engine runs in developer mode, with richer and deeper output. Differences
	// between production and development modes include:
	// * Forward parallel execution is enabled in production mode and disabled in development mode
	// * The time required to reach the first byte in development mode is faster than in production mode.
	//
	// Specific attributes of development mode include:
	// * The client will receive all of the executed module's logs.
	// * It's possible to request specific store snapshots in the execution tree (via `debug_initial_store_snapshot_for_modules`).
	// * Multiple module's output is possible.
	//
	// With production mode`, however, you trade off functionality for high speed enabling forward
	// parallel execution of module ahead of time.
	ProductionMode bool        `protobuf:"varint,5,opt,name=production_mode,json=productionMode,proto3" json:"production_mode,omitempty"`
	OutputModule   string      `protobuf:"bytes,6,opt,name=output_module,json=outputModule,proto3" json:"output_module,omitempty"`
	Modules        *v1.Modules `protobuf:"bytes,7,opt,name=modules,proto3" json:"modules,omitempty"`
	// Available only in developer mode
	DebugInitialStoreSnapshotForModules []string `protobuf:"bytes,10,rep,name=debug_initial_store_snapshot_for_modules,json=debugInitialStoreSnapshotForModules,proto3" json:"debug_initial_store_snapshot_for_modules,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetStartBlockNum() int64 {
	if x != nil {
		return x.StartBlockNum
	}
	return 0
}

func (x *Request) GetStartCursor() string {
	if x != nil {
		return x.StartCursor
	}
	return ""
}

func (x *Request) GetStopBlockNum() uint64 {
	if x != nil {
		return x.StopBlockNum
	}
	return 0
}

func (x *Request) GetFinalBlocksOnly() bool {
	if x != nil {
		return x.FinalBlocksOnly
	}
	return false
}

func (x *Request) GetProductionMode() bool {
	if x != nil {
		return x.ProductionMode
	}
	return false
}

func (x *Request) GetOutputModule() string {
	if x != nil {
		return x.OutputModule
	}
	return ""
}

func (x *Request) GetModules() *v1.Modules {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *Request) GetDebugInitialStoreSnapshotForModules() []string {
	if x != nil {
		return x.DebugInitialStoreSnapshotForModules
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*Response_Session
	//	*Response_Progress
	//	*Response_BlockScopedData
	//	*Response_BlockUndoSignal
	//	*Response_DebugSnapshotData
	//	*Response_DebugSnapshotComplete
	Message isResponse_Message `protobuf_oneof:"message"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{1}
}

func (m *Response) GetMessage() isResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Response) GetSession() *SessionInit {
	if x, ok := x.GetMessage().(*Response_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Response) GetProgress() *ModulesProgress {
	if x, ok := x.GetMessage().(*Response_Progress); ok {
		return x.Progress
	}
	return nil
}

func (x *Response) GetBlockScopedData() *BlockScopedData {
	if x, ok := x.GetMessage().(*Response_BlockScopedData); ok {
		return x.BlockScopedData
	}
	return nil
}

func (x *Response) GetBlockUndoSignal() *BlockUndoSignal {
	if x, ok := x.GetMessage().(*Response_BlockUndoSignal); ok {
		return x.BlockUndoSignal
	}
	return nil
}

func (x *Response) GetDebugSnapshotData() *InitialSnapshotData {
	if x, ok := x.GetMessage().(*Response_DebugSnapshotData); ok {
		return x.DebugSnapshotData
	}
	return nil
}

func (x *Response) GetDebugSnapshotComplete() *InitialSnapshotComplete {
	if x, ok := x.GetMessage().(*Response_DebugSnapshotComplete); ok {
		return x.DebugSnapshotComplete
	}
	return nil
}

type isResponse_Message interface {
	isResponse_Message()
}

type Response_Session struct {
	Session *SessionInit `protobuf:"bytes,1,opt,name=session,proto3,oneof"` // Always sent first
}

type Response_Progress struct {
	Progress *ModulesProgress `protobuf:"bytes,2,opt,name=progress,proto3,oneof"` // Progress of data preparation, before sending in the stream of `data` events.
}

type Response_BlockScopedData struct {
	BlockScopedData *BlockScopedData `protobuf:"bytes,3,opt,name=block_scoped_data,json=blockScopedData,proto3,oneof"`
}

type Response_BlockUndoSignal struct {
	BlockUndoSignal *BlockUndoSignal `protobuf:"bytes,4,opt,name=block_undo_signal,json=blockUndoSignal,proto3,oneof"`
}

type Response_DebugSnapshotData struct {
	// Available only in developer mode, and only if `debug_initial_store_snapshot_for_modules` is set.
	DebugSnapshotData *InitialSnapshotData `protobuf:"bytes,10,opt,name=debug_snapshot_data,json=debugSnapshotData,proto3,oneof"`
}

type Response_DebugSnapshotComplete struct {
	// Available only in developer mode, and only if `debug_initial_store_snapshot_for_modules` is set.
	DebugSnapshotComplete *InitialSnapshotComplete `protobuf:"bytes,11,opt,name=debug_snapshot_complete,json=debugSnapshotComplete,proto3,oneof"`
}

func (*Response_Session) isResponse_Message() {}

func (*Response_Progress) isResponse_Message() {}

func (*Response_BlockScopedData) isResponse_Message() {}

func (*Response_BlockUndoSignal) isResponse_Message() {}

func (*Response_DebugSnapshotData) isResponse_Message() {}

func (*Response_DebugSnapshotComplete) isResponse_Message() {}

// BlockUndoSignal informs you that every bit of data
// with a block number above 'last_valid_block' has been reverted
// on-chain. Delete that data and restart from 'last_valid_cursor'
type BlockUndoSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastValidBlock  *v1.BlockRef `protobuf:"bytes,1,opt,name=last_valid_block,json=lastValidBlock,proto3" json:"last_valid_block,omitempty"`
	LastValidCursor string       `protobuf:"bytes,2,opt,name=last_valid_cursor,json=lastValidCursor,proto3" json:"last_valid_cursor,omitempty"`
}

func (x *BlockUndoSignal) Reset() {
	*x = BlockUndoSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUndoSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUndoSignal) ProtoMessage() {}

func (x *BlockUndoSignal) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUndoSignal.ProtoReflect.Descriptor instead.
func (*BlockUndoSignal) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{2}
}

func (x *BlockUndoSignal) GetLastValidBlock() *v1.BlockRef {
	if x != nil {
		return x.LastValidBlock
	}
	return nil
}

func (x *BlockUndoSignal) GetLastValidCursor() string {
	if x != nil {
		return x.LastValidCursor
	}
	return ""
}

type BlockScopedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *MapModuleOutput `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Clock  *v1.Clock        `protobuf:"bytes,2,opt,name=clock,proto3" json:"clock,omitempty"`
	Cursor string           `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Non-deterministic, allows substreams-sink to let go of their undo data.
	FinalBlockHeight  uint64               `protobuf:"varint,4,opt,name=final_block_height,json=finalBlockHeight,proto3" json:"final_block_height,omitempty"`
	DebugMapOutputs   []*MapModuleOutput   `protobuf:"bytes,10,rep,name=debug_map_outputs,json=debugMapOutputs,proto3" json:"debug_map_outputs,omitempty"`
	DebugStoreOutputs []*StoreModuleOutput `protobuf:"bytes,11,rep,name=debug_store_outputs,json=debugStoreOutputs,proto3" json:"debug_store_outputs,omitempty"`
}

func (x *BlockScopedData) Reset() {
	*x = BlockScopedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockScopedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockScopedData) ProtoMessage() {}

func (x *BlockScopedData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockScopedData.ProtoReflect.Descriptor instead.
func (*BlockScopedData) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{3}
}

func (x *BlockScopedData) GetOutput() *MapModuleOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *BlockScopedData) GetClock() *v1.Clock {
	if x != nil {
		return x.Clock
	}
	return nil
}

func (x *BlockScopedData) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *BlockScopedData) GetFinalBlockHeight() uint64 {
	if x != nil {
		return x.FinalBlockHeight
	}
	return 0
}

func (x *BlockScopedData) GetDebugMapOutputs() []*MapModuleOutput {
	if x != nil {
		return x.DebugMapOutputs
	}
	return nil
}

func (x *BlockScopedData) GetDebugStoreOutputs() []*StoreModuleOutput {
	if x != nil {
		return x.DebugStoreOutputs
	}
	return nil
}

type SessionInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *SessionInit) Reset() {
	*x = SessionInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInit) ProtoMessage() {}

func (x *SessionInit) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInit.ProtoReflect.Descriptor instead.
func (*SessionInit) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{4}
}

func (x *SessionInit) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type InitialSnapshotComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor string `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *InitialSnapshotComplete) Reset() {
	*x = InitialSnapshotComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialSnapshotComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialSnapshotComplete) ProtoMessage() {}

func (x *InitialSnapshotComplete) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialSnapshotComplete.ProtoReflect.Descriptor instead.
func (*InitialSnapshotComplete) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{5}
}

func (x *InitialSnapshotComplete) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type InitialSnapshotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName string        `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	Deltas     []*StoreDelta `protobuf:"bytes,2,rep,name=deltas,proto3" json:"deltas,omitempty"`
	SentKeys   uint64        `protobuf:"varint,4,opt,name=sent_keys,json=sentKeys,proto3" json:"sent_keys,omitempty"`
	TotalKeys  uint64        `protobuf:"varint,3,opt,name=total_keys,json=totalKeys,proto3" json:"total_keys,omitempty"`
}

func (x *InitialSnapshotData) Reset() {
	*x = InitialSnapshotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialSnapshotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialSnapshotData) ProtoMessage() {}

func (x *InitialSnapshotData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialSnapshotData.ProtoReflect.Descriptor instead.
func (*InitialSnapshotData) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{6}
}

func (x *InitialSnapshotData) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *InitialSnapshotData) GetDeltas() []*StoreDelta {
	if x != nil {
		return x.Deltas
	}
	return nil
}

func (x *InitialSnapshotData) GetSentKeys() uint64 {
	if x != nil {
		return x.SentKeys
	}
	return 0
}

func (x *InitialSnapshotData) GetTotalKeys() uint64 {
	if x != nil {
		return x.TotalKeys
	}
	return 0
}

type MapModuleOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MapOutput *anypb.Any `protobuf:"bytes,2,opt,name=map_output,json=mapOutput,proto3" json:"map_output,omitempty"`
	// DebugOutputInfo is available in non-production mode only
	DebugInfo *OutputDebugInfo `protobuf:"bytes,10,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
}

func (x *MapModuleOutput) Reset() {
	*x = MapModuleOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapModuleOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapModuleOutput) ProtoMessage() {}

func (x *MapModuleOutput) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapModuleOutput.ProtoReflect.Descriptor instead.
func (*MapModuleOutput) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{7}
}

func (x *MapModuleOutput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MapModuleOutput) GetMapOutput() *anypb.Any {
	if x != nil {
		return x.MapOutput
	}
	return nil
}

func (x *MapModuleOutput) GetDebugInfo() *OutputDebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

// StoreModuleOutput are produced for store modules in development mode.
// It is not possible to retrieve store models in production, with parallelization
// enabled. If you need the deltas directly, write a pass through mapper module
// that will get them down to you.
type StoreModuleOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DebugStoreDeltas []*StoreDelta    `protobuf:"bytes,2,rep,name=debug_store_deltas,json=debugStoreDeltas,proto3" json:"debug_store_deltas,omitempty"`
	DebugInfo        *OutputDebugInfo `protobuf:"bytes,10,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
}

func (x *StoreModuleOutput) Reset() {
	*x = StoreModuleOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreModuleOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreModuleOutput) ProtoMessage() {}

func (x *StoreModuleOutput) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreModuleOutput.ProtoReflect.Descriptor instead.
func (*StoreModuleOutput) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{8}
}

func (x *StoreModuleOutput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoreModuleOutput) GetDebugStoreDeltas() []*StoreDelta {
	if x != nil {
		return x.DebugStoreDeltas
	}
	return nil
}

func (x *StoreModuleOutput) GetDebugInfo() *OutputDebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

type OutputDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []string `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	// LogsTruncated is a flag that tells you if you received all the logs or if they
	// were truncated because you logged too much (fixed limit currently is set to 128 KiB).
	LogsTruncated bool `protobuf:"varint,2,opt,name=logs_truncated,json=logsTruncated,proto3" json:"logs_truncated,omitempty"`
	Cached        bool `protobuf:"varint,3,opt,name=cached,proto3" json:"cached,omitempty"`
}

func (x *OutputDebugInfo) Reset() {
	*x = OutputDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputDebugInfo) ProtoMessage() {}

func (x *OutputDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputDebugInfo.ProtoReflect.Descriptor instead.
func (*OutputDebugInfo) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{9}
}

func (x *OutputDebugInfo) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *OutputDebugInfo) GetLogsTruncated() bool {
	if x != nil {
		return x.LogsTruncated
	}
	return false
}

func (x *OutputDebugInfo) GetCached() bool {
	if x != nil {
		return x.Cached
	}
	return false
}

type ModulesProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules []*ModuleProgress `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *ModulesProgress) Reset() {
	*x = ModulesProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModulesProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModulesProgress) ProtoMessage() {}

func (x *ModulesProgress) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModulesProgress.ProtoReflect.Descriptor instead.
func (*ModulesProgress) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{10}
}

func (x *ModulesProgress) GetModules() []*ModuleProgress {
	if x != nil {
		return x.Modules
	}
	return nil
}

type ModuleProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Type:
	//	*ModuleProgress_ProcessedRanges_
	//	*ModuleProgress_InitialState_
	//	*ModuleProgress_ProcessedBytes_
	//	*ModuleProgress_Failed_
	Type isModuleProgress_Type `protobuf_oneof:"type"`
}

func (x *ModuleProgress) Reset() {
	*x = ModuleProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleProgress) ProtoMessage() {}

func (x *ModuleProgress) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleProgress.ProtoReflect.Descriptor instead.
func (*ModuleProgress) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{11}
}

func (x *ModuleProgress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ModuleProgress) GetType() isModuleProgress_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ModuleProgress) GetProcessedRanges() *ModuleProgress_ProcessedRanges {
	if x, ok := x.GetType().(*ModuleProgress_ProcessedRanges_); ok {
		return x.ProcessedRanges
	}
	return nil
}

func (x *ModuleProgress) GetInitialState() *ModuleProgress_InitialState {
	if x, ok := x.GetType().(*ModuleProgress_InitialState_); ok {
		return x.InitialState
	}
	return nil
}

func (x *ModuleProgress) GetProcessedBytes() *ModuleProgress_ProcessedBytes {
	if x, ok := x.GetType().(*ModuleProgress_ProcessedBytes_); ok {
		return x.ProcessedBytes
	}
	return nil
}

func (x *ModuleProgress) GetFailed() *ModuleProgress_Failed {
	if x, ok := x.GetType().(*ModuleProgress_Failed_); ok {
		return x.Failed
	}
	return nil
}

type isModuleProgress_Type interface {
	isModuleProgress_Type()
}

type ModuleProgress_ProcessedRanges_ struct {
	ProcessedRanges *ModuleProgress_ProcessedRanges `protobuf:"bytes,2,opt,name=processed_ranges,json=processedRanges,proto3,oneof"`
}

type ModuleProgress_InitialState_ struct {
	InitialState *ModuleProgress_InitialState `protobuf:"bytes,3,opt,name=initial_state,json=initialState,proto3,oneof"`
}

type ModuleProgress_ProcessedBytes_ struct {
	ProcessedBytes *ModuleProgress_ProcessedBytes `protobuf:"bytes,4,opt,name=processed_bytes,json=processedBytes,proto3,oneof"`
}

type ModuleProgress_Failed_ struct {
	Failed *ModuleProgress_Failed `protobuf:"bytes,5,opt,name=failed,proto3,oneof"`
}

func (*ModuleProgress_ProcessedRanges_) isModuleProgress_Type() {}

func (*ModuleProgress_InitialState_) isModuleProgress_Type() {}

func (*ModuleProgress_ProcessedBytes_) isModuleProgress_Type() {}

func (*ModuleProgress_Failed_) isModuleProgress_Type() {}

type BlockRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlock uint64 `protobuf:"varint,2,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock   uint64 `protobuf:"varint,3,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
}

func (x *BlockRange) Reset() {
	*x = BlockRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRange) ProtoMessage() {}

func (x *BlockRange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRange.ProtoReflect.Descriptor instead.
func (*BlockRange) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{12}
}

func (x *BlockRange) GetStartBlock() uint64 {
	if x != nil {
		return x.StartBlock
	}
	return 0
}

func (x *BlockRange) GetEndBlock() uint64 {
	if x != nil {
		return x.EndBlock
	}
	return 0
}

type StoreDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation StoreDelta_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=sf.substreams.rpc.v2.StoreDelta_Operation" json:"operation,omitempty"`
	Ordinal   uint64               `protobuf:"varint,2,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	Key       string               `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	OldValue  []byte               `protobuf:"bytes,4,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue  []byte               `protobuf:"bytes,5,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
}

func (x *StoreDelta) Reset() {
	*x = StoreDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDelta) ProtoMessage() {}

func (x *StoreDelta) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDelta.ProtoReflect.Descriptor instead.
func (*StoreDelta) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{13}
}

func (x *StoreDelta) GetOperation() StoreDelta_Operation {
	if x != nil {
		return x.Operation
	}
	return StoreDelta_UNSET
}

func (x *StoreDelta) GetOrdinal() uint64 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

func (x *StoreDelta) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StoreDelta) GetOldValue() []byte {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *StoreDelta) GetNewValue() []byte {
	if x != nil {
		return x.NewValue
	}
	return nil
}

type ModuleProgress_ProcessedRanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessedRanges []*BlockRange `protobuf:"bytes,1,rep,name=processed_ranges,json=processedRanges,proto3" json:"processed_ranges,omitempty"`
}

func (x *ModuleProgress_ProcessedRanges) Reset() {
	*x = ModuleProgress_ProcessedRanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleProgress_ProcessedRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleProgress_ProcessedRanges) ProtoMessage() {}

func (x *ModuleProgress_ProcessedRanges) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleProgress_ProcessedRanges.ProtoReflect.Descriptor instead.
func (*ModuleProgress_ProcessedRanges) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ModuleProgress_ProcessedRanges) GetProcessedRanges() []*BlockRange {
	if x != nil {
		return x.ProcessedRanges
	}
	return nil
}

type ModuleProgress_InitialState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableUpToBlock uint64 `protobuf:"varint,2,opt,name=available_up_to_block,json=availableUpToBlock,proto3" json:"available_up_to_block,omitempty"`
}

func (x *ModuleProgress_InitialState) Reset() {
	*x = ModuleProgress_InitialState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleProgress_InitialState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleProgress_InitialState) ProtoMessage() {}

func (x *ModuleProgress_InitialState) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleProgress_InitialState.ProtoReflect.Descriptor instead.
func (*ModuleProgress_InitialState) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{11, 1}
}

func (x *ModuleProgress_InitialState) GetAvailableUpToBlock() uint64 {
	if x != nil {
		return x.AvailableUpToBlock
	}
	return 0
}

type ModuleProgress_ProcessedBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBytesRead    uint64 `protobuf:"varint,1,opt,name=total_bytes_read,json=totalBytesRead,proto3" json:"total_bytes_read,omitempty"`
	TotalBytesWritten uint64 `protobuf:"varint,2,opt,name=total_bytes_written,json=totalBytesWritten,proto3" json:"total_bytes_written,omitempty"`
	BytesReadDelta    uint64 `protobuf:"varint,3,opt,name=bytes_read_delta,json=bytesReadDelta,proto3" json:"bytes_read_delta,omitempty"`
	BytesWrittenDelta uint64 `protobuf:"varint,4,opt,name=bytes_written_delta,json=bytesWrittenDelta,proto3" json:"bytes_written_delta,omitempty"`
	NanoSecondsDelta  uint64 `protobuf:"varint,5,opt,name=nano_seconds_delta,json=nanoSecondsDelta,proto3" json:"nano_seconds_delta,omitempty"`
}

func (x *ModuleProgress_ProcessedBytes) Reset() {
	*x = ModuleProgress_ProcessedBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleProgress_ProcessedBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleProgress_ProcessedBytes) ProtoMessage() {}

func (x *ModuleProgress_ProcessedBytes) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleProgress_ProcessedBytes.ProtoReflect.Descriptor instead.
func (*ModuleProgress_ProcessedBytes) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{11, 2}
}

func (x *ModuleProgress_ProcessedBytes) GetTotalBytesRead() uint64 {
	if x != nil {
		return x.TotalBytesRead
	}
	return 0
}

func (x *ModuleProgress_ProcessedBytes) GetTotalBytesWritten() uint64 {
	if x != nil {
		return x.TotalBytesWritten
	}
	return 0
}

func (x *ModuleProgress_ProcessedBytes) GetBytesReadDelta() uint64 {
	if x != nil {
		return x.BytesReadDelta
	}
	return 0
}

func (x *ModuleProgress_ProcessedBytes) GetBytesWrittenDelta() uint64 {
	if x != nil {
		return x.BytesWrittenDelta
	}
	return 0
}

func (x *ModuleProgress_ProcessedBytes) GetNanoSecondsDelta() uint64 {
	if x != nil {
		return x.NanoSecondsDelta
	}
	return 0
}

type ModuleProgress_Failed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string   `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Logs   []string `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs,omitempty"`
	// FailureLogsTruncated is a flag that tells you if you received all the logs or if they
	// were truncated because you logged too much (fixed limit currently is set to 128 KiB).
	LogsTruncated bool `protobuf:"varint,3,opt,name=logs_truncated,json=logsTruncated,proto3" json:"logs_truncated,omitempty"`
}

func (x *ModuleProgress_Failed) Reset() {
	*x = ModuleProgress_Failed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleProgress_Failed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleProgress_Failed) ProtoMessage() {}

func (x *ModuleProgress_Failed) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_rpc_v2_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleProgress_Failed.ProtoReflect.Descriptor instead.
func (*ModuleProgress_Failed) Descriptor() ([]byte, []int) {
	return file_sf_substreams_rpc_v2_service_proto_rawDescGZIP(), []int{11, 3}
}

func (x *ModuleProgress_Failed) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ModuleProgress_Failed) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ModuleProgress_Failed) GetLogsTruncated() bool {
	if x != nil {
		return x.LogsTruncated
	}
	return false
}

var File_sf_substreams_rpc_v2_service_proto protoreflect.FileDescriptor

var file_sf_substreams_rpc_v2_service_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x66, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x66, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x66, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x80, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x28, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x23, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x89, 0x04, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x11,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x64, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x64, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x12, 0x5b, 0x0a, 0x13, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x67,
	0x0a, 0x17, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x15, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x64, 0x6f,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xf1, 0x02, 0x0a, 0x0f, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x66, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x51, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x11, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x28, 0x0a, 0x0b,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x13, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x11,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x52, 0x10, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x0f, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x73,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x22, 0x51, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x22, 0x85, 0x07, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x58,
	0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x1a,
	0x5e, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a,
	0x41, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x31, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x5f,
	0x74, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x54, 0x6f, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x1a, 0xf2, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x61, 0x6e,
	0x6f, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x1a, 0x5b, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x0a,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xf8, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e,
	0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x03, 0x32, 0x53, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x49, 0x0a,
	0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x4d, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x66, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2f,
	0x70, 0x62, 0x2f, 0x73, 0x66, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x32, 0x3b, 0x70, 0x62, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_substreams_rpc_v2_service_proto_rawDescOnce sync.Once
	file_sf_substreams_rpc_v2_service_proto_rawDescData = file_sf_substreams_rpc_v2_service_proto_rawDesc
)

func file_sf_substreams_rpc_v2_service_proto_rawDescGZIP() []byte {
	file_sf_substreams_rpc_v2_service_proto_rawDescOnce.Do(func() {
		file_sf_substreams_rpc_v2_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_substreams_rpc_v2_service_proto_rawDescData)
	})
	return file_sf_substreams_rpc_v2_service_proto_rawDescData
}

var file_sf_substreams_rpc_v2_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sf_substreams_rpc_v2_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_sf_substreams_rpc_v2_service_proto_goTypes = []interface{}{
	(StoreDelta_Operation)(0),              // 0: sf.substreams.rpc.v2.StoreDelta.Operation
	(*Request)(nil),                        // 1: sf.substreams.rpc.v2.Request
	(*Response)(nil),                       // 2: sf.substreams.rpc.v2.Response
	(*BlockUndoSignal)(nil),                // 3: sf.substreams.rpc.v2.BlockUndoSignal
	(*BlockScopedData)(nil),                // 4: sf.substreams.rpc.v2.BlockScopedData
	(*SessionInit)(nil),                    // 5: sf.substreams.rpc.v2.SessionInit
	(*InitialSnapshotComplete)(nil),        // 6: sf.substreams.rpc.v2.InitialSnapshotComplete
	(*InitialSnapshotData)(nil),            // 7: sf.substreams.rpc.v2.InitialSnapshotData
	(*MapModuleOutput)(nil),                // 8: sf.substreams.rpc.v2.MapModuleOutput
	(*StoreModuleOutput)(nil),              // 9: sf.substreams.rpc.v2.StoreModuleOutput
	(*OutputDebugInfo)(nil),                // 10: sf.substreams.rpc.v2.OutputDebugInfo
	(*ModulesProgress)(nil),                // 11: sf.substreams.rpc.v2.ModulesProgress
	(*ModuleProgress)(nil),                 // 12: sf.substreams.rpc.v2.ModuleProgress
	(*BlockRange)(nil),                     // 13: sf.substreams.rpc.v2.BlockRange
	(*StoreDelta)(nil),                     // 14: sf.substreams.rpc.v2.StoreDelta
	(*ModuleProgress_ProcessedRanges)(nil), // 15: sf.substreams.rpc.v2.ModuleProgress.ProcessedRanges
	(*ModuleProgress_InitialState)(nil),    // 16: sf.substreams.rpc.v2.ModuleProgress.InitialState
	(*ModuleProgress_ProcessedBytes)(nil),  // 17: sf.substreams.rpc.v2.ModuleProgress.ProcessedBytes
	(*ModuleProgress_Failed)(nil),          // 18: sf.substreams.rpc.v2.ModuleProgress.Failed
	(*v1.Modules)(nil),                     // 19: sf.substreams.v1.Modules
	(*v1.BlockRef)(nil),                    // 20: sf.substreams.v1.BlockRef
	(*v1.Clock)(nil),                       // 21: sf.substreams.v1.Clock
	(*anypb.Any)(nil),                      // 22: google.protobuf.Any
}
var file_sf_substreams_rpc_v2_service_proto_depIdxs = []int32{
	19, // 0: sf.substreams.rpc.v2.Request.modules:type_name -> sf.substreams.v1.Modules
	5,  // 1: sf.substreams.rpc.v2.Response.session:type_name -> sf.substreams.rpc.v2.SessionInit
	11, // 2: sf.substreams.rpc.v2.Response.progress:type_name -> sf.substreams.rpc.v2.ModulesProgress
	4,  // 3: sf.substreams.rpc.v2.Response.block_scoped_data:type_name -> sf.substreams.rpc.v2.BlockScopedData
	3,  // 4: sf.substreams.rpc.v2.Response.block_undo_signal:type_name -> sf.substreams.rpc.v2.BlockUndoSignal
	7,  // 5: sf.substreams.rpc.v2.Response.debug_snapshot_data:type_name -> sf.substreams.rpc.v2.InitialSnapshotData
	6,  // 6: sf.substreams.rpc.v2.Response.debug_snapshot_complete:type_name -> sf.substreams.rpc.v2.InitialSnapshotComplete
	20, // 7: sf.substreams.rpc.v2.BlockUndoSignal.last_valid_block:type_name -> sf.substreams.v1.BlockRef
	8,  // 8: sf.substreams.rpc.v2.BlockScopedData.output:type_name -> sf.substreams.rpc.v2.MapModuleOutput
	21, // 9: sf.substreams.rpc.v2.BlockScopedData.clock:type_name -> sf.substreams.v1.Clock
	8,  // 10: sf.substreams.rpc.v2.BlockScopedData.debug_map_outputs:type_name -> sf.substreams.rpc.v2.MapModuleOutput
	9,  // 11: sf.substreams.rpc.v2.BlockScopedData.debug_store_outputs:type_name -> sf.substreams.rpc.v2.StoreModuleOutput
	14, // 12: sf.substreams.rpc.v2.InitialSnapshotData.deltas:type_name -> sf.substreams.rpc.v2.StoreDelta
	22, // 13: sf.substreams.rpc.v2.MapModuleOutput.map_output:type_name -> google.protobuf.Any
	10, // 14: sf.substreams.rpc.v2.MapModuleOutput.debug_info:type_name -> sf.substreams.rpc.v2.OutputDebugInfo
	14, // 15: sf.substreams.rpc.v2.StoreModuleOutput.debug_store_deltas:type_name -> sf.substreams.rpc.v2.StoreDelta
	10, // 16: sf.substreams.rpc.v2.StoreModuleOutput.debug_info:type_name -> sf.substreams.rpc.v2.OutputDebugInfo
	12, // 17: sf.substreams.rpc.v2.ModulesProgress.modules:type_name -> sf.substreams.rpc.v2.ModuleProgress
	15, // 18: sf.substreams.rpc.v2.ModuleProgress.processed_ranges:type_name -> sf.substreams.rpc.v2.ModuleProgress.ProcessedRanges
	16, // 19: sf.substreams.rpc.v2.ModuleProgress.initial_state:type_name -> sf.substreams.rpc.v2.ModuleProgress.InitialState
	17, // 20: sf.substreams.rpc.v2.ModuleProgress.processed_bytes:type_name -> sf.substreams.rpc.v2.ModuleProgress.ProcessedBytes
	18, // 21: sf.substreams.rpc.v2.ModuleProgress.failed:type_name -> sf.substreams.rpc.v2.ModuleProgress.Failed
	0,  // 22: sf.substreams.rpc.v2.StoreDelta.operation:type_name -> sf.substreams.rpc.v2.StoreDelta.Operation
	13, // 23: sf.substreams.rpc.v2.ModuleProgress.ProcessedRanges.processed_ranges:type_name -> sf.substreams.rpc.v2.BlockRange
	1,  // 24: sf.substreams.rpc.v2.Stream.Blocks:input_type -> sf.substreams.rpc.v2.Request
	2,  // 25: sf.substreams.rpc.v2.Stream.Blocks:output_type -> sf.substreams.rpc.v2.Response
	25, // [25:26] is the sub-list for method output_type
	24, // [24:25] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_sf_substreams_rpc_v2_service_proto_init() }
func file_sf_substreams_rpc_v2_service_proto_init() {
	if File_sf_substreams_rpc_v2_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_substreams_rpc_v2_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUndoSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockScopedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialSnapshotComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialSnapshotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapModuleOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreModuleOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModulesProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleProgress_ProcessedRanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleProgress_InitialState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleProgress_ProcessedBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_rpc_v2_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleProgress_Failed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sf_substreams_rpc_v2_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Response_Session)(nil),
		(*Response_Progress)(nil),
		(*Response_BlockScopedData)(nil),
		(*Response_BlockUndoSignal)(nil),
		(*Response_DebugSnapshotData)(nil),
		(*Response_DebugSnapshotComplete)(nil),
	}
	file_sf_substreams_rpc_v2_service_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ModuleProgress_ProcessedRanges_)(nil),
		(*ModuleProgress_InitialState_)(nil),
		(*ModuleProgress_ProcessedBytes_)(nil),
		(*ModuleProgress_Failed_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_substreams_rpc_v2_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sf_substreams_rpc_v2_service_proto_goTypes,
		DependencyIndexes: file_sf_substreams_rpc_v2_service_proto_depIdxs,
		EnumInfos:         file_sf_substreams_rpc_v2_service_proto_enumTypes,
		MessageInfos:      file_sf_substreams_rpc_v2_service_proto_msgTypes,
	}.Build()
	File_sf_substreams_rpc_v2_service_proto = out.File
	file_sf_substreams_rpc_v2_service_proto_rawDesc = nil
	file_sf_substreams_rpc_v2_service_proto_goTypes = nil
	file_sf_substreams_rpc_v2_service_proto_depIdxs = nil
}
