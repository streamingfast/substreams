syntax = "proto3";

package sf.substreams.internal.v2;
option go_package = "github.com/streamingfast/substreams/pb/sf/substreams/intern/v2;pbssinternal";

import "google/protobuf/any.proto";
import "sf/substreams/v1/modules.proto";

service Substreams {
  rpc ProcessRange(ProcessRangeRequest) returns (stream ProcessRangeResponse);
}

message ProcessRangeRequest {
  uint64 start_block_num = 1;
  uint64 stop_block_num = 2;
  string output_module = 3;
  sf.substreams.v1.Modules modules = 4;
}

message ProcessRangeResponse {
  string module_name = 1;

  oneof type {
    BlockRange processed_range = 2;
    ProcessedBytes processed_bytes = 3;
    Failed failed = 4;
    Completed completed = 5;
  }
}

message Completed {
  repeated BlockRange all_processed_ranges = 1;
}

message ProcessedBytes {
  uint64 total_bytes_read = 1;
  uint64 total_bytes_written = 2;
  uint64 bytes_read_delta = 3;
  uint64 bytes_written_delta = 4;
  uint64 nano_seconds_delta = 5;
}

message Failed {
  string reason = 1;
  repeated string logs = 2;
  // FailureLogsTruncated is a flag that tells you if you received all the logs or if they
  // were truncated because you logged too much (fixed limit currently is set to 128 KiB).
  bool logs_truncated = 3;
}

message BlockRange {
  uint64 start_block = 2;
  uint64 end_block = 3;
}
