// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: sf/substreams/v1/substreams.proto

package substreamsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ForkStep int32

const (
	ForkStep_STEP_UNKNOWN ForkStep = 0
	// Block is new head block of the chain, that is linear with the previous block
	ForkStep_STEP_NEW ForkStep = 1
	// Block is now forked and should be undone, it's not the head block of the chain anymore
	ForkStep_STEP_UNDO ForkStep = 2
	// Block is now irreversible and can be committed to (finality is chain specific, see chain documentation for more details)
	ForkStep_STEP_IRREVERSIBLE ForkStep = 4
)

// Enum value maps for ForkStep.
var (
	ForkStep_name = map[int32]string{
		0: "STEP_UNKNOWN",
		1: "STEP_NEW",
		2: "STEP_UNDO",
		4: "STEP_IRREVERSIBLE",
	}
	ForkStep_value = map[string]int32{
		"STEP_UNKNOWN":      0,
		"STEP_NEW":          1,
		"STEP_UNDO":         2,
		"STEP_IRREVERSIBLE": 4,
	}
)

func (x ForkStep) Enum() *ForkStep {
	p := new(ForkStep)
	*p = x
	return p
}

func (x ForkStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForkStep) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_substreams_v1_substreams_proto_enumTypes[0].Descriptor()
}

func (ForkStep) Type() protoreflect.EnumType {
	return &file_sf_substreams_v1_substreams_proto_enumTypes[0]
}

func (x ForkStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForkStep.Descriptor instead.
func (ForkStep) EnumDescriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{0}
}

type StoreDelta_Operation int32

const (
	StoreDelta_UNSET  StoreDelta_Operation = 0
	StoreDelta_CREATE StoreDelta_Operation = 1
	StoreDelta_UPDATE StoreDelta_Operation = 2
	StoreDelta_DELETE StoreDelta_Operation = 3
)

// Enum value maps for StoreDelta_Operation.
var (
	StoreDelta_Operation_name = map[int32]string{
		0: "UNSET",
		1: "CREATE",
		2: "UPDATE",
		3: "DELETE",
	}
	StoreDelta_Operation_value = map[string]int32{
		"UNSET":  0,
		"CREATE": 1,
		"UPDATE": 2,
		"DELETE": 3,
	}
)

func (x StoreDelta_Operation) Enum() *StoreDelta_Operation {
	p := new(StoreDelta_Operation)
	*p = x
	return p
}

func (x StoreDelta_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoreDelta_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_substreams_v1_substreams_proto_enumTypes[1].Descriptor()
}

func (StoreDelta_Operation) Type() protoreflect.EnumType {
	return &file_sf_substreams_v1_substreams_proto_enumTypes[1]
}

func (x StoreDelta_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoreDelta_Operation.Descriptor instead.
func (StoreDelta_Operation) EnumDescriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{11, 0}
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlockNum                  int64      `protobuf:"varint,1,opt,name=start_block_num,json=startBlockNum,proto3" json:"start_block_num,omitempty"`
	StartCursor                    string     `protobuf:"bytes,2,opt,name=start_cursor,json=startCursor,proto3" json:"start_cursor,omitempty"`
	StopBlockNum                   uint64     `protobuf:"varint,3,opt,name=stop_block_num,json=stopBlockNum,proto3" json:"stop_block_num,omitempty"`
	ForkSteps                      []ForkStep `protobuf:"varint,4,rep,packed,name=fork_steps,json=forkSteps,proto3,enum=sf.substreams.v1.ForkStep" json:"fork_steps,omitempty"`
	IrreversibilityCondition       string     `protobuf:"bytes,5,opt,name=irreversibility_condition,json=irreversibilityCondition,proto3" json:"irreversibility_condition,omitempty"`
	Modules                        *Modules   `protobuf:"bytes,6,opt,name=modules,proto3" json:"modules,omitempty"`
	OutputModules                  []string   `protobuf:"bytes,7,rep,name=output_modules,json=outputModules,proto3" json:"output_modules,omitempty"`
	InitialStoreSnapshotForModules []string   `protobuf:"bytes,8,rep,name=initial_store_snapshot_for_modules,json=initialStoreSnapshotForModules,proto3" json:"initial_store_snapshot_for_modules,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetStartBlockNum() int64 {
	if x != nil {
		return x.StartBlockNum
	}
	return 0
}

func (x *Request) GetStartCursor() string {
	if x != nil {
		return x.StartCursor
	}
	return ""
}

func (x *Request) GetStopBlockNum() uint64 {
	if x != nil {
		return x.StopBlockNum
	}
	return 0
}

func (x *Request) GetForkSteps() []ForkStep {
	if x != nil {
		return x.ForkSteps
	}
	return nil
}

func (x *Request) GetIrreversibilityCondition() string {
	if x != nil {
		return x.IrreversibilityCondition
	}
	return ""
}

func (x *Request) GetModules() *Modules {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *Request) GetOutputModules() []string {
	if x != nil {
		return x.OutputModules
	}
	return nil
}

func (x *Request) GetInitialStoreSnapshotForModules() []string {
	if x != nil {
		return x.InitialStoreSnapshotForModules
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*Response_Session
	//	*Response_Progress
	//	*Response_SnapshotData
	//	*Response_SnapshotComplete
	//	*Response_Data
	Message isResponse_Message `protobuf_oneof:"message"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{1}
}

func (m *Response) GetMessage() isResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Response) GetSession() *SessionInit {
	if x, ok := x.GetMessage().(*Response_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Response) GetProgress() *ModulesProgress {
	if x, ok := x.GetMessage().(*Response_Progress); ok {
		return x.Progress
	}
	return nil
}

func (x *Response) GetSnapshotData() *InitialSnapshotData {
	if x, ok := x.GetMessage().(*Response_SnapshotData); ok {
		return x.SnapshotData
	}
	return nil
}

func (x *Response) GetSnapshotComplete() *InitialSnapshotComplete {
	if x, ok := x.GetMessage().(*Response_SnapshotComplete); ok {
		return x.SnapshotComplete
	}
	return nil
}

func (x *Response) GetData() *BlockScopedData {
	if x, ok := x.GetMessage().(*Response_Data); ok {
		return x.Data
	}
	return nil
}

type isResponse_Message interface {
	isResponse_Message()
}

type Response_Session struct {
	Session *SessionInit `protobuf:"bytes,5,opt,name=session,proto3,oneof"` // Always sent first
}

type Response_Progress struct {
	Progress *ModulesProgress `protobuf:"bytes,1,opt,name=progress,proto3,oneof"` // Progress of data preparation, before sending in the stream of `data` events.
}

type Response_SnapshotData struct {
	SnapshotData *InitialSnapshotData `protobuf:"bytes,2,opt,name=snapshot_data,json=snapshotData,proto3,oneof"`
}

type Response_SnapshotComplete struct {
	SnapshotComplete *InitialSnapshotComplete `protobuf:"bytes,3,opt,name=snapshot_complete,json=snapshotComplete,proto3,oneof"`
}

type Response_Data struct {
	Data *BlockScopedData `protobuf:"bytes,4,opt,name=data,proto3,oneof"`
}

func (*Response_Session) isResponse_Message() {}

func (*Response_Progress) isResponse_Message() {}

func (*Response_SnapshotData) isResponse_Message() {}

func (*Response_SnapshotComplete) isResponse_Message() {}

func (*Response_Data) isResponse_Message() {}

type SessionInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *SessionInit) Reset() {
	*x = SessionInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInit) ProtoMessage() {}

func (x *SessionInit) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInit.ProtoReflect.Descriptor instead.
func (*SessionInit) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{2}
}

func (x *SessionInit) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type InitialSnapshotComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor string `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *InitialSnapshotComplete) Reset() {
	*x = InitialSnapshotComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialSnapshotComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialSnapshotComplete) ProtoMessage() {}

func (x *InitialSnapshotComplete) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialSnapshotComplete.ProtoReflect.Descriptor instead.
func (*InitialSnapshotComplete) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{3}
}

func (x *InitialSnapshotComplete) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type InitialSnapshotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName string       `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	Deltas     *StoreDeltas `protobuf:"bytes,2,opt,name=deltas,proto3" json:"deltas,omitempty"`
	SentKeys   uint64       `protobuf:"varint,4,opt,name=sent_keys,json=sentKeys,proto3" json:"sent_keys,omitempty"`
	TotalKeys  uint64       `protobuf:"varint,3,opt,name=total_keys,json=totalKeys,proto3" json:"total_keys,omitempty"`
}

func (x *InitialSnapshotData) Reset() {
	*x = InitialSnapshotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialSnapshotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialSnapshotData) ProtoMessage() {}

func (x *InitialSnapshotData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialSnapshotData.ProtoReflect.Descriptor instead.
func (*InitialSnapshotData) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{4}
}

func (x *InitialSnapshotData) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *InitialSnapshotData) GetDeltas() *StoreDeltas {
	if x != nil {
		return x.Deltas
	}
	return nil
}

func (x *InitialSnapshotData) GetSentKeys() uint64 {
	if x != nil {
		return x.SentKeys
	}
	return 0
}

func (x *InitialSnapshotData) GetTotalKeys() uint64 {
	if x != nil {
		return x.TotalKeys
	}
	return 0
}

type BlockScopedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs []*ModuleOutput `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Clock   *Clock          `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
	Step    ForkStep        `protobuf:"varint,6,opt,name=step,proto3,enum=sf.substreams.v1.ForkStep" json:"step,omitempty"`
	Cursor  string          `protobuf:"bytes,10,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *BlockScopedData) Reset() {
	*x = BlockScopedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockScopedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockScopedData) ProtoMessage() {}

func (x *BlockScopedData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockScopedData.ProtoReflect.Descriptor instead.
func (*BlockScopedData) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{5}
}

func (x *BlockScopedData) GetOutputs() []*ModuleOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *BlockScopedData) GetClock() *Clock {
	if x != nil {
		return x.Clock
	}
	return nil
}

func (x *BlockScopedData) GetStep() ForkStep {
	if x != nil {
		return x.Step
	}
	return ForkStep_STEP_UNKNOWN
}

func (x *BlockScopedData) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type ModuleOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Data:
	//	*ModuleOutput_MapOutput
	//	*ModuleOutput_StoreDeltas
	Data isModuleOutput_Data `protobuf_oneof:"data"`
	Logs []string            `protobuf:"bytes,4,rep,name=logs,proto3" json:"logs,omitempty"`
	// LogsTruncated is a flag that tells you if you received all the logs or if they
	// were truncated because you logged too much (fixed limit currently is set to 128 KiB).
	LogsTruncated bool `protobuf:"varint,5,opt,name=logs_truncated,json=logsTruncated,proto3" json:"logs_truncated,omitempty"`
}

func (x *ModuleOutput) Reset() {
	*x = ModuleOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleOutput) ProtoMessage() {}

func (x *ModuleOutput) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleOutput.ProtoReflect.Descriptor instead.
func (*ModuleOutput) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{6}
}

func (x *ModuleOutput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ModuleOutput) GetData() isModuleOutput_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ModuleOutput) GetMapOutput() *anypb.Any {
	if x, ok := x.GetData().(*ModuleOutput_MapOutput); ok {
		return x.MapOutput
	}
	return nil
}

func (x *ModuleOutput) GetStoreDeltas() *StoreDeltas {
	if x, ok := x.GetData().(*ModuleOutput_StoreDeltas); ok {
		return x.StoreDeltas
	}
	return nil
}

func (x *ModuleOutput) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ModuleOutput) GetLogsTruncated() bool {
	if x != nil {
		return x.LogsTruncated
	}
	return false
}

type isModuleOutput_Data interface {
	isModuleOutput_Data()
}

type ModuleOutput_MapOutput struct {
	MapOutput *anypb.Any `protobuf:"bytes,2,opt,name=map_output,json=mapOutput,proto3,oneof"`
}

type ModuleOutput_StoreDeltas struct {
	StoreDeltas *StoreDeltas `protobuf:"bytes,3,opt,name=store_deltas,json=storeDeltas,proto3,oneof"`
}

func (*ModuleOutput_MapOutput) isModuleOutput_Data() {}

func (*ModuleOutput_StoreDeltas) isModuleOutput_Data() {}

type ModulesProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules []*ModuleProgress `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *ModulesProgress) Reset() {
	*x = ModulesProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModulesProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModulesProgress) ProtoMessage() {}

func (x *ModulesProgress) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModulesProgress.ProtoReflect.Descriptor instead.
func (*ModulesProgress) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{7}
}

func (x *ModulesProgress) GetModules() []*ModuleProgress {
	if x != nil {
		return x.Modules
	}
	return nil
}

type ModuleProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Type:
	//	*ModuleProgress_ProcessedRanges
	//	*ModuleProgress_InitialState_
	//	*ModuleProgress_ProcessedBytes_
	//	*ModuleProgress_Failed_
	Type isModuleProgress_Type `protobuf_oneof:"type"`
}

func (x *ModuleProgress) Reset() {
	*x = ModuleProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleProgress) ProtoMessage() {}

func (x *ModuleProgress) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleProgress.ProtoReflect.Descriptor instead.
func (*ModuleProgress) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{8}
}

func (x *ModuleProgress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ModuleProgress) GetType() isModuleProgress_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ModuleProgress) GetProcessedRanges() *ModuleProgress_ProcessedRange {
	if x, ok := x.GetType().(*ModuleProgress_ProcessedRanges); ok {
		return x.ProcessedRanges
	}
	return nil
}

func (x *ModuleProgress) GetInitialState() *ModuleProgress_InitialState {
	if x, ok := x.GetType().(*ModuleProgress_InitialState_); ok {
		return x.InitialState
	}
	return nil
}

func (x *ModuleProgress) GetProcessedBytes() *ModuleProgress_ProcessedBytes {
	if x, ok := x.GetType().(*ModuleProgress_ProcessedBytes_); ok {
		return x.ProcessedBytes
	}
	return nil
}

func (x *ModuleProgress) GetFailed() *ModuleProgress_Failed {
	if x, ok := x.GetType().(*ModuleProgress_Failed_); ok {
		return x.Failed
	}
	return nil
}

type isModuleProgress_Type interface {
	isModuleProgress_Type()
}

type ModuleProgress_ProcessedRanges struct {
	ProcessedRanges *ModuleProgress_ProcessedRange `protobuf:"bytes,2,opt,name=processed_ranges,json=processedRanges,proto3,oneof"`
}

type ModuleProgress_InitialState_ struct {
	InitialState *ModuleProgress_InitialState `protobuf:"bytes,3,opt,name=initial_state,json=initialState,proto3,oneof"`
}

type ModuleProgress_ProcessedBytes_ struct {
	ProcessedBytes *ModuleProgress_ProcessedBytes `protobuf:"bytes,4,opt,name=processed_bytes,json=processedBytes,proto3,oneof"`
}

type ModuleProgress_Failed_ struct {
	Failed *ModuleProgress_Failed `protobuf:"bytes,5,opt,name=failed,proto3,oneof"`
}

func (*ModuleProgress_ProcessedRanges) isModuleProgress_Type() {}

func (*ModuleProgress_InitialState_) isModuleProgress_Type() {}

func (*ModuleProgress_ProcessedBytes_) isModuleProgress_Type() {}

func (*ModuleProgress_Failed_) isModuleProgress_Type() {}

type BlockRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlock uint64 `protobuf:"varint,2,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock   uint64 `protobuf:"varint,3,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
}

func (x *BlockRange) Reset() {
	*x = BlockRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRange) ProtoMessage() {}

func (x *BlockRange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRange.ProtoReflect.Descriptor instead.
func (*BlockRange) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{9}
}

func (x *BlockRange) GetStartBlock() uint64 {
	if x != nil {
		return x.StartBlock
	}
	return 0
}

func (x *BlockRange) GetEndBlock() uint64 {
	if x != nil {
		return x.EndBlock
	}
	return 0
}

type StoreDeltas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deltas []*StoreDelta `protobuf:"bytes,1,rep,name=deltas,proto3" json:"deltas,omitempty"`
}

func (x *StoreDeltas) Reset() {
	*x = StoreDeltas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreDeltas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDeltas) ProtoMessage() {}

func (x *StoreDeltas) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDeltas.ProtoReflect.Descriptor instead.
func (*StoreDeltas) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{10}
}

func (x *StoreDeltas) GetDeltas() []*StoreDelta {
	if x != nil {
		return x.Deltas
	}
	return nil
}

type StoreDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation StoreDelta_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=sf.substreams.v1.StoreDelta_Operation" json:"operation,omitempty"`
	Ordinal   uint64               `protobuf:"varint,2,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	Key       string               `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	OldValue  []byte               `protobuf:"bytes,4,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue  []byte               `protobuf:"bytes,5,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
}

func (x *StoreDelta) Reset() {
	*x = StoreDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDelta) ProtoMessage() {}

func (x *StoreDelta) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDelta.ProtoReflect.Descriptor instead.
func (*StoreDelta) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{11}
}

func (x *StoreDelta) GetOperation() StoreDelta_Operation {
	if x != nil {
		return x.Operation
	}
	return StoreDelta_UNSET
}

func (x *StoreDelta) GetOrdinal() uint64 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

func (x *StoreDelta) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StoreDelta) GetOldValue() []byte {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *StoreDelta) GetNewValue() []byte {
	if x != nil {
		return x.NewValue
	}
	return nil
}

type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNum  uint64                 `protobuf:"varint,1,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	BlockId   string                 `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value     *anypb.Any             `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{12}
}

func (x *Output) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *Output) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *Output) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Output) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

type ModuleProgress_ProcessedRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessedRanges []*BlockRange `protobuf:"bytes,1,rep,name=processed_ranges,json=processedRanges,proto3" json:"processed_ranges,omitempty"`
}

func (x *ModuleProgress_ProcessedRange) Reset() {
	*x = ModuleProgress_ProcessedRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleProgress_ProcessedRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleProgress_ProcessedRange) ProtoMessage() {}

func (x *ModuleProgress_ProcessedRange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleProgress_ProcessedRange.ProtoReflect.Descriptor instead.
func (*ModuleProgress_ProcessedRange) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ModuleProgress_ProcessedRange) GetProcessedRanges() []*BlockRange {
	if x != nil {
		return x.ProcessedRanges
	}
	return nil
}

type ModuleProgress_InitialState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableUpToBlock uint64 `protobuf:"varint,2,opt,name=available_up_to_block,json=availableUpToBlock,proto3" json:"available_up_to_block,omitempty"`
}

func (x *ModuleProgress_InitialState) Reset() {
	*x = ModuleProgress_InitialState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleProgress_InitialState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleProgress_InitialState) ProtoMessage() {}

func (x *ModuleProgress_InitialState) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleProgress_InitialState.ProtoReflect.Descriptor instead.
func (*ModuleProgress_InitialState) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{8, 1}
}

func (x *ModuleProgress_InitialState) GetAvailableUpToBlock() uint64 {
	if x != nil {
		return x.AvailableUpToBlock
	}
	return 0
}

type ModuleProgress_ProcessedBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBytesRead    uint64 `protobuf:"varint,1,opt,name=total_bytes_read,json=totalBytesRead,proto3" json:"total_bytes_read,omitempty"`
	TotalBytesWritten uint64 `protobuf:"varint,2,opt,name=total_bytes_written,json=totalBytesWritten,proto3" json:"total_bytes_written,omitempty"`
}

func (x *ModuleProgress_ProcessedBytes) Reset() {
	*x = ModuleProgress_ProcessedBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleProgress_ProcessedBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleProgress_ProcessedBytes) ProtoMessage() {}

func (x *ModuleProgress_ProcessedBytes) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleProgress_ProcessedBytes.ProtoReflect.Descriptor instead.
func (*ModuleProgress_ProcessedBytes) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{8, 2}
}

func (x *ModuleProgress_ProcessedBytes) GetTotalBytesRead() uint64 {
	if x != nil {
		return x.TotalBytesRead
	}
	return 0
}

func (x *ModuleProgress_ProcessedBytes) GetTotalBytesWritten() uint64 {
	if x != nil {
		return x.TotalBytesWritten
	}
	return 0
}

type ModuleProgress_Failed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string   `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Logs   []string `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs,omitempty"`
	// FailureLogsTruncated is a flag that tells you if you received all the logs or if they
	// were truncated because you logged too much (fixed limit currently is set to 128 KiB).
	LogsTruncated bool `protobuf:"varint,3,opt,name=logs_truncated,json=logsTruncated,proto3" json:"logs_truncated,omitempty"`
}

func (x *ModuleProgress_Failed) Reset() {
	*x = ModuleProgress_Failed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_substreams_v1_substreams_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleProgress_Failed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleProgress_Failed) ProtoMessage() {}

func (x *ModuleProgress_Failed) ProtoReflect() protoreflect.Message {
	mi := &file_sf_substreams_v1_substreams_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleProgress_Failed.ProtoReflect.Descriptor instead.
func (*ModuleProgress_Failed) Descriptor() ([]byte, []int) {
	return file_sf_substreams_v1_substreams_proto_rawDescGZIP(), []int{8, 3}
}

func (x *ModuleProgress_Failed) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ModuleProgress_Failed) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ModuleProgress_Failed) GetLogsTruncated() bool {
	if x != nil {
		return x.LogsTruncated
	}
	return false
}

var File_sf_substreams_v1_substreams_proto protoreflect.FileDescriptor

var file_sf_substreams_v1_substreams_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x66, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x73, 0x66, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x73, 0x66, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9a, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x73, 0x74, 0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x0a,
	0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x09, 0x66, 0x6f,
	0x72, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x3b, 0x0a, 0x19, 0x69, 0x72, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x72, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x4a, 0x0a, 0x22, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1e, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xf2, 0x02, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x37, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x28, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xa9,
	0x01, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x65,
	0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22,
	0xe0, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00,
	0x52, 0x09, 0x6d, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x4d, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0xe6, 0x05, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x1a, 0x59, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x47, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x41, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x70, 0x54, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x6a, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x1a, 0x5b, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x0a, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x43, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x0a,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x03, 0x22, 0xa6, 0x01, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x5c, 0x0a, 0x08, 0x46,
	0x6f, 0x72, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x55, 0x4e, 0x44, 0x4f, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x49,
	0x52, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x22, 0x04, 0x08,
	0x03, 0x10, 0x03, 0x22, 0x04, 0x08, 0x05, 0x10, 0x05, 0x32, 0x4b, 0x0a, 0x06, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x41, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x19, 0x2e,
	0x73, 0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0xcf, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x66, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x42,
	0x0f, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x66, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x58, 0xaa, 0x02,
	0x10, 0x53, 0x66, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x10, 0x53, 0x66, 0x5c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x53, 0x66, 0x5c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x53, 0x66, 0x3a, 0x3a, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_substreams_v1_substreams_proto_rawDescOnce sync.Once
	file_sf_substreams_v1_substreams_proto_rawDescData = file_sf_substreams_v1_substreams_proto_rawDesc
)

func file_sf_substreams_v1_substreams_proto_rawDescGZIP() []byte {
	file_sf_substreams_v1_substreams_proto_rawDescOnce.Do(func() {
		file_sf_substreams_v1_substreams_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_substreams_v1_substreams_proto_rawDescData)
	})
	return file_sf_substreams_v1_substreams_proto_rawDescData
}

var file_sf_substreams_v1_substreams_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sf_substreams_v1_substreams_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_sf_substreams_v1_substreams_proto_goTypes = []interface{}{
	(ForkStep)(0),                         // 0: sf.substreams.v1.ForkStep
	(StoreDelta_Operation)(0),             // 1: sf.substreams.v1.StoreDelta.Operation
	(*Request)(nil),                       // 2: sf.substreams.v1.Request
	(*Response)(nil),                      // 3: sf.substreams.v1.Response
	(*SessionInit)(nil),                   // 4: sf.substreams.v1.SessionInit
	(*InitialSnapshotComplete)(nil),       // 5: sf.substreams.v1.InitialSnapshotComplete
	(*InitialSnapshotData)(nil),           // 6: sf.substreams.v1.InitialSnapshotData
	(*BlockScopedData)(nil),               // 7: sf.substreams.v1.BlockScopedData
	(*ModuleOutput)(nil),                  // 8: sf.substreams.v1.ModuleOutput
	(*ModulesProgress)(nil),               // 9: sf.substreams.v1.ModulesProgress
	(*ModuleProgress)(nil),                // 10: sf.substreams.v1.ModuleProgress
	(*BlockRange)(nil),                    // 11: sf.substreams.v1.BlockRange
	(*StoreDeltas)(nil),                   // 12: sf.substreams.v1.StoreDeltas
	(*StoreDelta)(nil),                    // 13: sf.substreams.v1.StoreDelta
	(*Output)(nil),                        // 14: sf.substreams.v1.Output
	(*ModuleProgress_ProcessedRange)(nil), // 15: sf.substreams.v1.ModuleProgress.ProcessedRange
	(*ModuleProgress_InitialState)(nil),   // 16: sf.substreams.v1.ModuleProgress.InitialState
	(*ModuleProgress_ProcessedBytes)(nil), // 17: sf.substreams.v1.ModuleProgress.ProcessedBytes
	(*ModuleProgress_Failed)(nil),         // 18: sf.substreams.v1.ModuleProgress.Failed
	(*Modules)(nil),                       // 19: sf.substreams.v1.Modules
	(*Clock)(nil),                         // 20: sf.substreams.v1.Clock
	(*anypb.Any)(nil),                     // 21: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),         // 22: google.protobuf.Timestamp
}
var file_sf_substreams_v1_substreams_proto_depIdxs = []int32{
	0,  // 0: sf.substreams.v1.Request.fork_steps:type_name -> sf.substreams.v1.ForkStep
	19, // 1: sf.substreams.v1.Request.modules:type_name -> sf.substreams.v1.Modules
	4,  // 2: sf.substreams.v1.Response.session:type_name -> sf.substreams.v1.SessionInit
	9,  // 3: sf.substreams.v1.Response.progress:type_name -> sf.substreams.v1.ModulesProgress
	6,  // 4: sf.substreams.v1.Response.snapshot_data:type_name -> sf.substreams.v1.InitialSnapshotData
	5,  // 5: sf.substreams.v1.Response.snapshot_complete:type_name -> sf.substreams.v1.InitialSnapshotComplete
	7,  // 6: sf.substreams.v1.Response.data:type_name -> sf.substreams.v1.BlockScopedData
	12, // 7: sf.substreams.v1.InitialSnapshotData.deltas:type_name -> sf.substreams.v1.StoreDeltas
	8,  // 8: sf.substreams.v1.BlockScopedData.outputs:type_name -> sf.substreams.v1.ModuleOutput
	20, // 9: sf.substreams.v1.BlockScopedData.clock:type_name -> sf.substreams.v1.Clock
	0,  // 10: sf.substreams.v1.BlockScopedData.step:type_name -> sf.substreams.v1.ForkStep
	21, // 11: sf.substreams.v1.ModuleOutput.map_output:type_name -> google.protobuf.Any
	12, // 12: sf.substreams.v1.ModuleOutput.store_deltas:type_name -> sf.substreams.v1.StoreDeltas
	10, // 13: sf.substreams.v1.ModulesProgress.modules:type_name -> sf.substreams.v1.ModuleProgress
	15, // 14: sf.substreams.v1.ModuleProgress.processed_ranges:type_name -> sf.substreams.v1.ModuleProgress.ProcessedRange
	16, // 15: sf.substreams.v1.ModuleProgress.initial_state:type_name -> sf.substreams.v1.ModuleProgress.InitialState
	17, // 16: sf.substreams.v1.ModuleProgress.processed_bytes:type_name -> sf.substreams.v1.ModuleProgress.ProcessedBytes
	18, // 17: sf.substreams.v1.ModuleProgress.failed:type_name -> sf.substreams.v1.ModuleProgress.Failed
	13, // 18: sf.substreams.v1.StoreDeltas.deltas:type_name -> sf.substreams.v1.StoreDelta
	1,  // 19: sf.substreams.v1.StoreDelta.operation:type_name -> sf.substreams.v1.StoreDelta.Operation
	22, // 20: sf.substreams.v1.Output.timestamp:type_name -> google.protobuf.Timestamp
	21, // 21: sf.substreams.v1.Output.value:type_name -> google.protobuf.Any
	11, // 22: sf.substreams.v1.ModuleProgress.ProcessedRange.processed_ranges:type_name -> sf.substreams.v1.BlockRange
	2,  // 23: sf.substreams.v1.Stream.Blocks:input_type -> sf.substreams.v1.Request
	3,  // 24: sf.substreams.v1.Stream.Blocks:output_type -> sf.substreams.v1.Response
	24, // [24:25] is the sub-list for method output_type
	23, // [23:24] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_sf_substreams_v1_substreams_proto_init() }
func file_sf_substreams_v1_substreams_proto_init() {
	if File_sf_substreams_v1_substreams_proto != nil {
		return
	}
	file_sf_substreams_v1_modules_proto_init()
	file_sf_substreams_v1_clock_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sf_substreams_v1_substreams_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialSnapshotComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialSnapshotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockScopedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModulesProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreDeltas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleProgress_ProcessedRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleProgress_InitialState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleProgress_ProcessedBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_substreams_v1_substreams_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleProgress_Failed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sf_substreams_v1_substreams_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Response_Session)(nil),
		(*Response_Progress)(nil),
		(*Response_SnapshotData)(nil),
		(*Response_SnapshotComplete)(nil),
		(*Response_Data)(nil),
	}
	file_sf_substreams_v1_substreams_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ModuleOutput_MapOutput)(nil),
		(*ModuleOutput_StoreDeltas)(nil),
	}
	file_sf_substreams_v1_substreams_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ModuleProgress_ProcessedRanges)(nil),
		(*ModuleProgress_InitialState_)(nil),
		(*ModuleProgress_ProcessedBytes_)(nil),
		(*ModuleProgress_Failed_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_substreams_v1_substreams_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sf_substreams_v1_substreams_proto_goTypes,
		DependencyIndexes: file_sf_substreams_v1_substreams_proto_depIdxs,
		EnumInfos:         file_sf_substreams_v1_substreams_proto_enumTypes,
		MessageInfos:      file_sf_substreams_v1_substreams_proto_msgTypes,
	}.Build()
	File_sf_substreams_v1_substreams_proto = out.File
	file_sf_substreams_v1_substreams_proto_rawDesc = nil
	file_sf_substreams_v1_substreams_proto_goTypes = nil
	file_sf_substreams_v1_substreams_proto_depIdxs = nil
}
