// Code generated by Substreams. DO NOT EDIT.
use crate::pb;
use substreams::errors::Error;

pub struct Substreams{}

pub trait SubstreamsTrait {

    fn test_map(
        params: String,
        block: pb::test::Block,
    ) -> Result<pb::test::MapResult, Error>;

    fn test_store_proto(
        test_map: pb::test::MapResult,
        store: substreams::store::StoreSetProto<pb::test::MapResult>,
    );

    fn test_store_delete_prefix(
        block: pb::test::Block,
        store: substreams::store::StoreSetInt64,
    );

    fn assert_test_store_delete_prefix(
        block: pb::test::Block,
        test_store_delete_prefix: substreams::store::StoreGetInt64,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_add_i64(
        block: pb::test::Block,
        store: substreams::store::StoreAddInt64,
    );

    fn assert_test_store_add_i64(
        block: pb::test::Block,
        setup_test_store_add_i64: substreams::store::StoreGetInt64,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_add_i64_deltas(
        block: pb::test::Block,
        setup_test_store_add_i64: substreams::store::StoreGetInt64,
        setup_test_store_add_i64_deltas: substreams::store::Deltas<substreams::store::DeltaInt64>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_set_i64(
        block: pb::test::Block,
        store: substreams::store::StoreSetInt64,
    );

    fn assert_test_store_set_i64(
        block: pb::test::Block,
        setup_test_store_set_i64: substreams::store::StoreGetInt64,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_set_i64_deltas(
        block: pb::test::Block,
        setup_test_store_set_i64: substreams::store::StoreGetInt64,
        setup_test_store_set_i64_deltas: substreams::store::Deltas<substreams::store::DeltaInt64>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_set_if_not_exists_i64(
        block: pb::test::Block,
        store: substreams::store::StoreSetIfNotExistsInt64,
    );

    fn assert_test_store_set_if_not_exists_i64(
        block: pb::test::Block,
        setup_test_store_set_if_not_exists_i64: substreams::store::StoreGetInt64,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_set_if_not_exists_i64_deltas(
        block: pb::test::Block,
        setup_test_store_set_if_not_exists_i64: substreams::store::StoreGetInt64,
        setup_test_store_set_if_not_exists_i64_deltas: substreams::store::Deltas<substreams::store::DeltaInt64>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_min_i64(
        block: pb::test::Block,
        store: substreams::store::StoreMinInt64,
    );

    fn assert_test_store_min_i64(
        block: pb::test::Block,
        setup_test_store_min_i64: substreams::store::StoreGetInt64,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_min_i64_deltas(
        block: pb::test::Block,
        setup_test_store_min_i64: substreams::store::StoreGetInt64,
        setup_test_store_min_i64_deltas: substreams::store::Deltas<substreams::store::DeltaInt64>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_max_i64(
        block: pb::test::Block,
        store: substreams::store::StoreMaxInt64,
    );

    fn assert_test_store_max_i64(
        block: pb::test::Block,
        setup_test_store_max_i64: substreams::store::StoreGetInt64,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_max_i64_deltas(
        block: pb::test::Block,
        setup_test_store_max_i64: substreams::store::StoreGetInt64,
        setup_test_store_max_i64_deltas: substreams::store::Deltas<substreams::store::DeltaInt64>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_add_float64(
        block: pb::test::Block,
        store: substreams::store::StoreAddFloat64,
    );

    fn assert_test_store_add_float64(
        block: pb::test::Block,
        setup_test_store_add_float64: substreams::store::StoreGetFloat64,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_add_float64_deltas(
        block: pb::test::Block,
        setup_test_store_add_float64: substreams::store::StoreGetFloat64,
        setup_test_store_add_float64_deltas: substreams::store::Deltas<substreams::store::DeltaFloat64>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_set_float64(
        block: pb::test::Block,
        store: substreams::store::StoreSetFloat64,
    );

    fn assert_test_store_set_float64(
        block: pb::test::Block,
        setup_test_store_set_float64: substreams::store::StoreGetFloat64,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_set_float64_deltas(
        block: pb::test::Block,
        setup_test_store_set_float64: substreams::store::StoreGetFloat64,
        setup_test_store_set_float64_deltas: substreams::store::Deltas<substreams::store::DeltaFloat64>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_set_if_not_exists_float64(
        block: pb::test::Block,
        store: substreams::store::StoreSetIfNotExistsFloat64,
    );

    fn assert_test_store_set_if_not_exists_float64(
        block: pb::test::Block,
        setup_test_store_set_if_not_exists_float64: substreams::store::StoreGetFloat64,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_set_if_not_exists_float64_deltas(
        block: pb::test::Block,
        setup_test_store_set_if_not_exists_float64: substreams::store::StoreGetFloat64,
        setup_test_store_set_if_not_exists_float64_deltas: substreams::store::Deltas<substreams::store::DeltaFloat64>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_min_float64(
        block: pb::test::Block,
        store: substreams::store::StoreMinFloat64,
    );

    fn assert_test_store_min_float64(
        block: pb::test::Block,
        setup_test_store_min_float64: substreams::store::StoreGetFloat64,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_min_float64_deltas(
        block: pb::test::Block,
        setup_test_store_min_float64: substreams::store::StoreGetFloat64,
        setup_test_store_min_float64_deltas: substreams::store::Deltas<substreams::store::DeltaFloat64>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_max_float64(
        block: pb::test::Block,
        store: substreams::store::StoreMaxFloat64,
    );

    fn assert_test_store_max_float64(
        block: pb::test::Block,
        setup_test_store_max_float64: substreams::store::StoreGetFloat64,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_max_float64_deltas(
        block: pb::test::Block,
        setup_test_store_max_float64: substreams::store::StoreGetFloat64,
        setup_test_store_max_float64_deltas: substreams::store::Deltas<substreams::store::DeltaFloat64>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_add_bigint(
        block: pb::test::Block,
        store: substreams::store::StoreAddBigInt,
    );

    fn assert_test_store_add_bigint(
        block: pb::test::Block,
        setup_test_store_add_bigint: substreams::store::StoreGetBigInt,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_add_bigint_deltas(
        block: pb::test::Block,
        setup_test_store_add_bigint: substreams::store::StoreGetBigInt,
        setup_test_store_add_bigint_deltas: substreams::store::Deltas<substreams::store::DeltaBigInt>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_set_bigint(
        block: pb::test::Block,
        store: substreams::store::StoreSetBigInt,
    );

    fn assert_test_store_set_bigint(
        block: pb::test::Block,
        setup_test_store_set_bigint: substreams::store::StoreGetBigInt,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_set_bigint_deltas(
        block: pb::test::Block,
        setup_test_store_set_bigint: substreams::store::StoreGetBigInt,
        setup_test_store_set_bigint_deltas: substreams::store::Deltas<substreams::store::DeltaBigInt>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_set_if_not_exists_bigint(
        block: pb::test::Block,
        store: substreams::store::StoreSetIfNotExistsBigInt,
    );

    fn assert_test_store_set_if_not_exists_bigint(
        block: pb::test::Block,
        setup_test_store_set_if_not_exists_bigint: substreams::store::StoreGetBigInt,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_set_if_not_exists_bigint_deltas(
        block: pb::test::Block,
        setup_test_store_set_if_not_exists_bigint: substreams::store::StoreGetBigInt,
        setup_test_store_set_if_not_exists_bigint_deltas: substreams::store::Deltas<substreams::store::DeltaBigInt>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_min_bigint(
        block: pb::test::Block,
        store: substreams::store::StoreMinBigInt,
    );

    fn assert_test_store_min_bigint(
        block: pb::test::Block,
        setup_test_store_min_bigint: substreams::store::StoreGetBigInt,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_min_bigint_deltas(
        block: pb::test::Block,
        setup_test_store_min_bigint: substreams::store::StoreGetBigInt,
        setup_test_store_min_bigint_deltas: substreams::store::Deltas<substreams::store::DeltaBigInt>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_max_bigint(
        block: pb::test::Block,
        store: substreams::store::StoreMaxBigInt,
    );

    fn assert_test_store_max_bigint(
        block: pb::test::Block,
        setup_test_store_max_bigint: substreams::store::StoreGetBigInt,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_max_bigint_deltas(
        block: pb::test::Block,
        setup_test_store_max_bigint: substreams::store::StoreGetBigInt,
        setup_test_store_max_bigint_deltas: substreams::store::Deltas<substreams::store::DeltaBigInt>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_add_bigdecimal(
        block: pb::test::Block,
        store: substreams::store::StoreAddBigDecimal,
    );

    fn assert_test_store_add_bigdecimal(
        block: pb::test::Block,
        setup_test_store_add_bigdecimal: substreams::store::StoreGetBigDecimal,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_add_bigdecimal_deltas(
        block: pb::test::Block,
        setup_test_store_add_bigdecimal: substreams::store::StoreGetBigDecimal,
        setup_test_store_add_bigdecimal_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_set_bigdecimal(
        block: pb::test::Block,
        store: substreams::store::StoreSetBigDecimal,
    );

    fn assert_test_store_set_bigdecimal(
        block: pb::test::Block,
        setup_test_store_set_bigdecimal: substreams::store::StoreGetBigDecimal,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_set_bigdecimal_deltas(
        block: pb::test::Block,
        setup_test_store_set_bigdecimal: substreams::store::StoreGetBigDecimal,
        setup_test_store_set_bigdecimal_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_set_if_not_exists_bigdecimal(
        block: pb::test::Block,
        store: substreams::store::StoreSetIfNotExistsBigDecimal,
    );

    fn assert_test_store_set_if_not_exists_bigdecimal(
        block: pb::test::Block,
        setup_test_store_set_if_not_exists_bigdecimal: substreams::store::StoreGetBigDecimal,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_set_if_not_exists_bigdecimal_deltas(
        block: pb::test::Block,
        setup_test_store_set_if_not_exists_bigdecimal: substreams::store::StoreGetBigDecimal,
        setup_test_store_set_if_not_exists_bigdecimal_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_min_bigdecimal(
        block: pb::test::Block,
        store: substreams::store::StoreMinBigDecimal,
    );

    fn assert_test_store_min_bigdecimal(
        block: pb::test::Block,
        setup_test_store_min_bigdecimal: substreams::store::StoreGetBigDecimal,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_min_bigdecimal_deltas(
        block: pb::test::Block,
        setup_test_store_min_bigdecimal: substreams::store::StoreGetBigDecimal,
        setup_test_store_min_bigdecimal_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_max_bigdecimal(
        block: pb::test::Block,
        store: substreams::store::StoreMaxBigDecimal,
    );

    fn assert_test_store_max_bigdecimal(
        block: pb::test::Block,
        setup_test_store_max_bigdecimal: substreams::store::StoreGetBigDecimal,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_max_bigdecimal_deltas(
        block: pb::test::Block,
        setup_test_store_max_bigdecimal: substreams::store::StoreGetBigDecimal,
        setup_test_store_max_bigdecimal_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_set_string(
        block: pb::test::Block,
        store: substreams::store::StoreSetString,
    );

    fn assert_test_store_set_string(
        block: pb::test::Block,
        setup_test_store_set_string: substreams::store::StoreGetString,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_set_string_deltas(
        block: pb::test::Block,
        setup_test_store_set_string: substreams::store::StoreGetString,
        setup_test_store_set_string_deltas: substreams::store::Deltas<substreams::store::DeltaString>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_set_if_not_exists_string(
        block: pb::test::Block,
        store: substreams::store::StoreSetIfNotExistsString,
    );

    fn assert_test_store_set_if_not_exists_string(
        block: pb::test::Block,
        setup_test_store_set_if_not_exists_string: substreams::store::StoreGetString,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_set_if_not_exists_string_deltas(
        block: pb::test::Block,
        setup_test_store_set_if_not_exists_string: substreams::store::StoreGetString,
        setup_test_store_set_if_not_exists_string_deltas: substreams::store::Deltas<substreams::store::DeltaString>,
    ) -> Result<pb::test::Boolean, Error>;

    fn setup_test_store_append_string(
        block: pb::test::Block,
        store: substreams::store::StoreAppend<String>,
    );

    fn assert_test_store_append_string(
        block: pb::test::Block,
        setup_test_store_append_string: substreams::store::StoreGetRaw,
    ) -> Result<pb::test::Boolean, Error>;

    fn assert_test_store_append_string_deltas(
        block: pb::test::Block,
        setup_test_store_append_string: substreams::store::StoreGetRaw,
        setup_test_store_append_string_deltas: substreams::store::Deltas<substreams::store::DeltaArray<String>>,
    ) -> Result<pb::test::Boolean, Error>;

    fn store_root(
        block: pb::test::Block,
        store: substreams::store::StoreSetInt64,
    );

    fn store_depend(
        block: pb::test::Block,
        store_root: substreams::store::StoreGetInt64,
        store: substreams::store::StoreSetInt64,
    );

    fn store_depends_on_depend(
        block: pb::test::Block,
        store_root: substreams::store::StoreGetInt64,
        store_depend: substreams::store::StoreGetInt64,
        store: substreams::store::StoreSetInt64,
    );

    fn assert_all_test_i64(
        assert_test_store_add_i64: pb::test::Boolean,
        assert_test_store_add_i64_deltas: pb::test::Boolean,
        assert_test_store_set_i64: pb::test::Boolean,
        assert_test_store_set_i64_deltas: pb::test::Boolean,
        assert_test_store_set_if_not_exists_i64: pb::test::Boolean,
        assert_test_store_set_if_not_exists_i64_deltas: pb::test::Boolean,
        assert_test_store_min_i64: pb::test::Boolean,
        assert_test_store_min_i64_deltas: pb::test::Boolean,
        assert_test_store_max_i64: pb::test::Boolean,
        assert_test_store_max_i64_deltas: pb::test::Boolean,
        store: substreams::store::StoreSetInt64,
    );

    fn assert_all_test_float64(
        assert_test_store_add_float64: pb::test::Boolean,
        assert_test_store_add_float64_deltas: pb::test::Boolean,
        assert_test_store_set_float64: pb::test::Boolean,
        assert_test_store_set_float64_deltas: pb::test::Boolean,
        assert_test_store_set_if_not_exists_float64: pb::test::Boolean,
        assert_test_store_set_if_not_exists_float64_deltas: pb::test::Boolean,
        assert_test_store_min_float64: pb::test::Boolean,
        assert_test_store_min_float64_deltas: pb::test::Boolean,
        assert_test_store_max_float64: pb::test::Boolean,
        assert_test_store_max_float64_deltas: pb::test::Boolean,
        store: substreams::store::StoreSetInt64,
    );

    fn assert_all_test_bigint(
        assert_test_store_add_bigint: pb::test::Boolean,
        assert_test_store_add_bigint_deltas: pb::test::Boolean,
        assert_test_store_set_bigint: pb::test::Boolean,
        assert_test_store_set_bigint_deltas: pb::test::Boolean,
        assert_test_store_set_if_not_exists_bigint: pb::test::Boolean,
        assert_test_store_set_if_not_exists_bigint_deltas: pb::test::Boolean,
        assert_test_store_min_bigint: pb::test::Boolean,
        assert_test_store_min_bigint_deltas: pb::test::Boolean,
        assert_test_store_max_bigint: pb::test::Boolean,
        assert_test_store_max_bigint_deltas: pb::test::Boolean,
        store: substreams::store::StoreSetInt64,
    );

    fn assert_all_test_bigdecimal(
        assert_test_store_add_bigdecimal: pb::test::Boolean,
        assert_test_store_add_bigdecimal_deltas: pb::test::Boolean,
        assert_test_store_set_bigdecimal: pb::test::Boolean,
        assert_test_store_set_bigdecimal_deltas: pb::test::Boolean,
        assert_test_store_set_if_not_exists_bigdecimal: pb::test::Boolean,
        assert_test_store_set_if_not_exists_bigdecimal_deltas: pb::test::Boolean,
        assert_test_store_min_bigdecimal: pb::test::Boolean,
        assert_test_store_min_bigdecimal_deltas: pb::test::Boolean,
        assert_test_store_max_bigdecimal: pb::test::Boolean,
        assert_test_store_max_bigdecimal_deltas: pb::test::Boolean,
        store: substreams::store::StoreSetInt64,
    );

    fn assert_all_test_string(
        assert_test_store_append_string: pb::test::Boolean,
        assert_test_store_append_string_deltas: pb::test::Boolean,
        assert_test_store_set_string: pb::test::Boolean,
        assert_test_store_set_string_deltas: pb::test::Boolean,
        assert_test_store_set_if_not_exists_string: pb::test::Boolean,
        assert_test_store_set_if_not_exists_string_deltas: pb::test::Boolean,
        store: substreams::store::StoreSetInt64,
    );

    fn assert_all_test_delete_prefix(
        assert_test_store_delete_prefix: pb::test::Boolean,
        store: substreams::store::StoreSetInt64,
    );

    fn assert_all_test(
        assert_all_test_delete_prefix: substreams::store::StoreGetInt64,
        assert_all_test_string: substreams::store::StoreGetInt64,
        assert_all_test_i64: substreams::store::StoreGetInt64,
        assert_all_test_float64: substreams::store::StoreGetInt64,
        assert_all_test_bigint: substreams::store::StoreGetInt64,
        assert_all_test_bigdecimal: substreams::store::StoreGetInt64,
    ) -> Result<pb::test::Boolean, Error>;
}



