// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package tui

import (
	"fmt"
	"strings"
)

const (
	// OutputModeTUI is a OutputMode of type TUI.
	OutputModeTUI OutputMode = iota
	// OutputModeJSON is a OutputMode of type JSON.
	OutputModeJSON
	// OutputModeJSONL is a OutputMode of type JSONL.
	OutputModeJSONL
	// OutputModeCLOCK is a OutputMode of type CLOCK.
	OutputModeCLOCK
)

var ErrInvalidOutputMode = fmt.Errorf("not a valid OutputMode, try [%s]", strings.Join(_OutputModeNames, ", "))

const _OutputModeName = "TUIJSONJSONLCLOCK"

var _OutputModeNames = []string{
	_OutputModeName[0:3],
	_OutputModeName[3:7],
	_OutputModeName[7:12],
	_OutputModeName[12:17],
}

// OutputModeNames returns a list of possible string values of OutputMode.
func OutputModeNames() []string {
	tmp := make([]string, len(_OutputModeNames))
	copy(tmp, _OutputModeNames)
	return tmp
}

var _OutputModeMap = map[OutputMode]string{
	OutputModeTUI:   _OutputModeName[0:3],
	OutputModeJSON:  _OutputModeName[3:7],
	OutputModeJSONL: _OutputModeName[7:12],
	OutputModeCLOCK: _OutputModeName[12:17],
}

// String implements the Stringer interface.
func (x OutputMode) String() string {
	if str, ok := _OutputModeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("OutputMode(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x OutputMode) IsValid() bool {
	_, ok := _OutputModeMap[x]
	return ok
}

var _OutputModeValue = map[string]OutputMode{
	_OutputModeName[0:3]:                    OutputModeTUI,
	strings.ToLower(_OutputModeName[0:3]):   OutputModeTUI,
	_OutputModeName[3:7]:                    OutputModeJSON,
	strings.ToLower(_OutputModeName[3:7]):   OutputModeJSON,
	_OutputModeName[7:12]:                   OutputModeJSONL,
	strings.ToLower(_OutputModeName[7:12]):  OutputModeJSONL,
	_OutputModeName[12:17]:                  OutputModeCLOCK,
	strings.ToLower(_OutputModeName[12:17]): OutputModeCLOCK,
}

// ParseOutputMode attempts to convert a string to a OutputMode.
func ParseOutputMode(name string) (OutputMode, error) {
	if x, ok := _OutputModeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _OutputModeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return OutputMode(0), fmt.Errorf("%s is %w", name, ErrInvalidOutputMode)
}

// MarshalText implements the text marshaller method.
func (x OutputMode) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *OutputMode) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseOutputMode(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
