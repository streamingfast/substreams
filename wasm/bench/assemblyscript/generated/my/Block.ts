// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { BlockHeader } from "./BlockHeader";

export class Block {
  static encode(message: Block, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.ver);

    writer.uint32(18);
    writer.bytes(message.hash);

    writer.uint32(24);
    writer.uint64(message.number);

    writer.uint32(32);
    writer.uint64(message.size);

    const header = message.header;
    if (header !== null) {
      writer.uint32(42);
      writer.fork();
      BlockHeader.encode(header, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Block {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Block();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.ver = reader.int32();
          break;

        case 2:
          message.hash = reader.bytes();
          break;

        case 3:
          message.number = reader.uint64();
          break;

        case 4:
          message.size = reader.uint64();
          break;

        case 5:
          message.header = BlockHeader.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  ver: i32;
  hash: Uint8Array;
  number: u64;
  size: u64;
  header: BlockHeader | null;

  constructor(
    ver: i32 = 0,
    hash: Uint8Array = new Uint8Array(0),
    number: u64 = 0,
    size: u64 = 0,
    header: BlockHeader | null = null
  ) {
    this.ver = ver;
    this.hash = hash;
    this.number = number;
    this.size = size;
    this.header = header;
  }
}
