// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class BlockHeader {
  static encode(message: BlockHeader, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.parentHash);

    writer.uint32(18);
    writer.bytes(message.uncleHash);

    writer.uint32(26);
    writer.bytes(message.coinbase);

    writer.uint32(34);
    writer.bytes(message.stateRoot);

    writer.uint32(42);
    writer.bytes(message.transactionsRoot);

    writer.uint32(50);
    writer.bytes(message.receiptRoot);

    writer.uint32(58);
    writer.bytes(message.logsBloom);
  }

  static decode(reader: Reader, length: i32): BlockHeader {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BlockHeader();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.parentHash = reader.bytes();
          break;

        case 2:
          message.uncleHash = reader.bytes();
          break;

        case 3:
          message.coinbase = reader.bytes();
          break;

        case 4:
          message.stateRoot = reader.bytes();
          break;

        case 5:
          message.transactionsRoot = reader.bytes();
          break;

        case 6:
          message.receiptRoot = reader.bytes();
          break;

        case 7:
          message.logsBloom = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  parentHash: Uint8Array;
  uncleHash: Uint8Array;
  coinbase: Uint8Array;
  stateRoot: Uint8Array;
  transactionsRoot: Uint8Array;
  receiptRoot: Uint8Array;
  logsBloom: Uint8Array;

  constructor(
    parentHash: Uint8Array = new Uint8Array(0),
    uncleHash: Uint8Array = new Uint8Array(0),
    coinbase: Uint8Array = new Uint8Array(0),
    stateRoot: Uint8Array = new Uint8Array(0),
    transactionsRoot: Uint8Array = new Uint8Array(0),
    receiptRoot: Uint8Array = new Uint8Array(0),
    logsBloom: Uint8Array = new Uint8Array(0)
  ) {
    this.parentHash = parentHash;
    this.uncleHash = uncleHash;
    this.coinbase = coinbase;
    this.stateRoot = stateRoot;
    this.transactionsRoot = transactionsRoot;
    this.receiptRoot = receiptRoot;
    this.logsBloom = logsBloom;
  }
}
